import { NzTreeNode } from 'ng-zorro-antd/tree';
import { IdGenerater } from 'epsgis';
import { isArray } from 'lodash';
import { newXbsjFolderNode, newXbsjLayerNode } from '../models/layer-xbsj-func';
export class SceneTreeUtils {
    static SceneTree2NgZorroTree(root) {
        if (!root || !root.children || root.children.length <= 0) {
            return root;
        }
        let rootNode = null;
        if (root.title && root.title !== "未命名") {
            rootNode = new NzTreeNode({
                title: root.title,
                expanded: root.expand === true,
                key: root.guid || root.xbsjGuid || IdGenerater.newGuid(),
                origin: root,
                isLeaf: false,
                parentNode: null
            });
            rootNode.level = -1;
        }
        const _layerNodes = [];
        if (rootNode) {
            rootNode.children.push(...SceneTreeUtils.convertChildren(root.children, rootNode));
            _layerNodes.push(rootNode);
        }
        else {
            _layerNodes.push(...SceneTreeUtils.convertChildren(root.children, rootNode));
        }
        return _layerNodes;
    }
    static convertChildren(children, parentNode) {
        if (!children || children.length <= 0) {
            return [];
        }
        const _layerNodes = [];
        children.forEach(item => {
            let node = null;
            if (item.children) {
                node = new NzTreeNode({
                    level: parentNode.level + 1,
                    title: item.title,
                    isExpanded: item.expand === true,
                    key: item.guid || item.xbsjGuid || IdGenerater.newGuid(),
                    origin: item,
                    isLeaf: false,
                    parentNode: parentNode
                });
                node.parentNode = parentNode;
                node.level = parentNode.level + 1;
                node.isExpanded = item.expand ? true : false;
                if (item.children.length >= 1) {
                    node.children.push(...SceneTreeUtils.convertChildren(item.children, node));
                }
                let checkList = [];
                node.children.forEach((child) => {
                    if (child.children && child.children.length > 0) {
                        checkList.push(child.isChecked);
                    }
                    else {
                        if (child.origin.origin.show) {
                            checkList.push(true);
                        }
                        else {
                            checkList.push(false);
                        }
                    }
                });
                if (SceneTreeUtils.isAllEqual(checkList) && checkList[0] == true) {
                    node.isChecked = true;
                }
                else if (SceneTreeUtils.isAllEqual(checkList) && checkList[0] == false) {
                    node.isChecked = false;
                }
                else if (!SceneTreeUtils.isAllEqual(checkList)) {
                    node.isHalfChecked = true;
                }
                _layerNodes.push(node);
            }
            else {
                let childNode = SceneTreeUtils.convertCzmObject(item.czmObject, parentNode);
                childNode.parentNode = childNode.origin.parentNode;
                childNode.level = childNode.parentNode.level + 1;
                _layerNodes.push(childNode);
            }
        });
        return _layerNodes;
    }
    static isAllEqual(array) {
        if (array.length > 0) {
            return !array.some(function (value, index) {
                return value !== array[0];
            });
        }
        else {
            return true;
        }
    }
    static convertCzmObject(czmObject, parentNode) {
        if (!czmObject) {
            return null;
        }
        return new NzTreeNode({
            title: czmObject.name,
            key: czmObject.guid || czmObject.xbsjGuid || IdGenerater.newGuid(),
            origin: czmObject,
            isLeaf: true,
            checked: czmObject.show,
            parentNode: parentNode
        });
    }
    static GetXbsjCzmObject(node) {
        return node && node.origin && node.origin.origin;
    }
    static loadLayers(layerConfig) {
        if (!layerConfig) {
            return null;
        }
        if (!layerConfig.basemaps && !layerConfig.layers) {
            return null;
        }
        const _layerNodes = [];
        const _layerlist = [
            {
                "title": "basemap",
                "ref": "basemap",
                "children": [],
            },
            {
                "title": "layerlist",
                "ref": "layerlist",
                "children": [],
            },
            {
                "tilte": "pin",
                "ref": "pin",
                "children": []
            }
        ];
        if (typeof layerConfig.basemaps === "object" && isArray(layerConfig.basemaps)) {
            layerConfig.basemaps.forEach((item) => {
                _layerlist[0].children.push(SceneTreeUtils.loadLayerNode(item));
            });
        }
        if (typeof layerConfig.layers === "object" && isArray(layerConfig.layers)) {
            layerConfig.layers.forEach((item) => {
                _layerlist[1].children.push(SceneTreeUtils.loadLayerNode(item));
            });
        }
        return { children: _layerlist };
    }
    static loadLayerNode(item) {
        if (isArray(item.children)) {
            const node = newXbsjFolderNode(item.title);
            if (item.children && item.children.length >= 1) {
                item.children.forEach((child) => {
                    node.children.push(SceneTreeUtils.loadLayerNode(child));
                });
            }
            node.expand = item.expand;
            return node;
        }
        else if (item.url || item.layer) {
            const node = newXbsjLayerNode(item.type, item.title, item.url);
            node.czmObject.xbsjGuid = item.guid;
            node.czmObject.show = item.show ? true : false;
            node.ref = item.ref;
            if (node.czmObject.hasOwnProperty("xbsjImageryProvider")) {
                if (item.srcCoordType) {
                    node.czmObject.xbsjImageryProvider.XbsjImageryProvider.srcCoordType = item.srcCoordType;
                }
                if (item.dstCoordType) {
                    node.czmObject.xbsjImageryProvider.XbsjImageryProvider.dstCoordType = item.dstCoordType;
                }
            }
            else if (node.czmObject.hasOwnProperty("xbsjTerrainProvider")) {
            }
            else if (node.hasOwnProperty("url")) {
            }
            if (item.extendOptions) {
                node.czmObject = Object.assign(node.czmObject, item.extendOptions);
                if (item.extendOptions.rectangle) {
                    let rect = [];
                    node.czmObject.rectangle.forEach(item => {
                        rect.push(item / 180 * Math.PI);
                    });
                    node.czmObject.rectangle = rect;
                }
            }
            return node;
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,