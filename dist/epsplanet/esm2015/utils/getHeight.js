function getPositionsHeightFromTileset(earth, positions, resultCallback) {
    if (!earth.czm.scene.globe.depthTestAgainstTerrain) {
        console.warn("scene.globe.depthTestAgainstTerrain is false, may not get the height!");
    }
    const cps = [];
    for (let p of positions) {
        cps.push(new Cesium.Cartographic(p[0], p[1], p[2]));
    }
    earth.czm.scene
        .sampleHeightMostDetailed(cps)
        .then(r => {
        try {
            let i = 0;
            for (let p of positions) {
                if (r[i].height === undefined) {
                    throw new Error("r[i].height === undefined");
                }
                p[2] = r[i].height;
                i++;
            }
            resultCallback(true);
        }
        catch (error) {
            console.error("sampleHeightMostDetailed error 1!");
            resultCallback(false);
        }
    })
        .otherwise(error => {
        resultCallback(false);
        console.error("sampleHeightMostDetailed error 2!");
    });
}
function getPositionsHeightFromTerrain(earth, positions, resultCallback) {
    var terrainProvider = earth.czm.scene.terrainProvider;
    if (terrainProvider instanceof Cesium.EllipsoidTerrainProvider) {
        console.warn("没加载地形，可能获取不到高程信息");
    }
    const cps = [];
    for (let p of positions) {
        cps.push(new Cesium.Cartographic.fromCartesian(p));
    }
    var promise = Cesium.sampleTerrainMostDetailed(terrainProvider, cps);
    Cesium.when(promise, function (r) {
        try {
            let i = 0;
            for (let p of positions) {
                if (r[i].height === undefined) {
                    throw new Error("r[i].height === undefined");
                }
                p = new Cesium.Cartesian3.fromRadians(r[i].longitude, r[i].latitude, r[i].height);
                i++;
            }
            resultCallback(positions);
        }
        catch (error) {
            console.error("sampleTerrainMostDetailed error 1!");
            resultCallback(false);
        }
    }, function (error) {
        resultCallback(false);
        console.error("sampleTerrainMostDetailed error 2!" + error);
    });
}
export { getPositionsHeightFromTerrain, getPositionsHeightFromTileset };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SGVpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZXBzcGxhbmV0L3V0aWxzL2dldEhlaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLDZCQUE2QixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsY0FBYztJQUNuRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFO1FBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQ1IsdUVBQXVFLENBQzFFLENBQUM7S0FDTDtJQUVELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNmLEtBQUssSUFBSSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ3JCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2RDtJQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSztTQUNWLHdCQUF3QixDQUFDLEdBQUcsQ0FBQztTQUM3QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDTixJQUFJO1lBQ0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsS0FBSyxJQUFJLENBQUMsSUFBSSxTQUFTLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7b0JBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztpQkFDaEQ7Z0JBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQ25CLENBQUMsRUFBRSxDQUFDO2FBQ1A7WUFFRCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztZQUNuRCxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDTCxDQUFDLENBQUM7U0FDRCxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDZixjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELFNBQVMsNkJBQTZCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxjQUFjO0lBRW5FLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQztJQUV0RCxJQUFJLGVBQWUsWUFBWSxNQUFNLENBQUMsd0JBQXdCLEVBQUU7UUFDNUQsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2YsS0FBSyxJQUFJLENBQUMsSUFBSSxTQUFTLEVBQUU7UUFDckIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEQ7SUFFRCxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMseUJBQXlCLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQ1AsT0FBTyxFQUNQLFVBQVUsQ0FBQztRQUNQLElBQUk7WUFDQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDVixLQUFLLElBQUksQ0FBQyxJQUFJLFNBQVMsRUFBRTtnQkFDckIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtvQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2lCQUNoRDtnQkFJRCxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUNqRixDQUFDLEVBQUUsQ0FBQzthQUNQO1lBQ0QsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7WUFDcEQsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQyxFQUNELFVBQVUsS0FBSztRQUNYLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUMsQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUVELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0UG9zaXRpb25zSGVpZ2h0RnJvbVRpbGVzZXQoZWFydGgsIHBvc2l0aW9ucywgcmVzdWx0Q2FsbGJhY2spIHtcclxuICAgIGlmICghZWFydGguY3ptLnNjZW5lLmdsb2JlLmRlcHRoVGVzdEFnYWluc3RUZXJyYWluKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICBcInNjZW5lLmdsb2JlLmRlcHRoVGVzdEFnYWluc3RUZXJyYWluIGlzIGZhbHNlLCBtYXkgbm90IGdldCB0aGUgaGVpZ2h0IVwiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjcHMgPSBbXTtcclxuICAgIGZvciAobGV0IHAgb2YgcG9zaXRpb25zKSB7XHJcbiAgICAgICAgY3BzLnB1c2gobmV3IENlc2l1bS5DYXJ0b2dyYXBoaWMocFswXSwgcFsxXSwgcFsyXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGVhcnRoLmN6bS5zY2VuZVxyXG4gICAgICAgIC5zYW1wbGVIZWlnaHRNb3N0RGV0YWlsZWQoY3BzKVxyXG4gICAgICAgIC50aGVuKHIgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcCBvZiBwb3NpdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocltpXS5oZWlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyW2ldLmhlaWdodCA9PT0gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwWzJdID0gcltpXS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJzYW1wbGVIZWlnaHRNb3N0RGV0YWlsZWQgZXJyb3IgMSFcIik7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vdGhlcndpc2UoZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHRDYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJzYW1wbGVIZWlnaHRNb3N0RGV0YWlsZWQgZXJyb3IgMiFcIik7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBvc2l0aW9uc0hlaWdodEZyb21UZXJyYWluKGVhcnRoLCBwb3NpdGlvbnMsIHJlc3VsdENhbGxiYWNrKSB7XHJcbiAgICAvLyBRdWVyeSB0aGUgdGVycmFpbiBoZWlnaHQgb2YgdHdvIENhcnRvZ3JhcGhpYyBwb3NpdGlvbnNcclxuICAgIHZhciB0ZXJyYWluUHJvdmlkZXIgPSBlYXJ0aC5jem0uc2NlbmUudGVycmFpblByb3ZpZGVyO1xyXG5cclxuICAgIGlmICh0ZXJyYWluUHJvdmlkZXIgaW5zdGFuY2VvZiBDZXNpdW0uRWxsaXBzb2lkVGVycmFpblByb3ZpZGVyKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwi5rKh5Yqg6L295Zyw5b2i77yM5Y+v6IO96I635Y+W5LiN5Yiw6auY56iL5L+h5oGvXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNwcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgcCBvZiBwb3NpdGlvbnMpIHtcclxuICAgICAgICBjcHMucHVzaChuZXcgQ2VzaXVtLkNhcnRvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuKHApKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcHJvbWlzZSA9IENlc2l1bS5zYW1wbGVUZXJyYWluTW9zdERldGFpbGVkKHRlcnJhaW5Qcm92aWRlciwgY3BzKTtcclxuICAgIENlc2l1bS53aGVuKFxyXG4gICAgICAgIHByb21pc2UsXHJcbiAgICAgICAgZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHAgb2YgcG9zaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJbaV0uaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicltpXS5oZWlnaHQgPT09IHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcFtcInhcIl09cltpXS5sb25naXR1ZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcFtcInlcIl09cltpXS5sYXRpdHVkZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwW1wielwiXSA9IHJbaV0uaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIHAgPSBuZXcgQ2VzaXVtLkNhcnRlc2lhbjMuZnJvbVJhZGlhbnMocltpXS5sb25naXR1ZGUsIHJbaV0ubGF0aXR1ZGUsIHJbaV0uaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrKHBvc2l0aW9ucyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwic2FtcGxlVGVycmFpbk1vc3REZXRhaWxlZCBlcnJvciAxIVwiKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInNhbXBsZVRlcnJhaW5Nb3N0RGV0YWlsZWQgZXJyb3IgMiFcIiArIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgeyBnZXRQb3NpdGlvbnNIZWlnaHRGcm9tVGVycmFpbiwgZ2V0UG9zaXRpb25zSGVpZ2h0RnJvbVRpbGVzZXQgfVxyXG4iXX0=