import axios from 'axios';
import qs from 'qs';
export class Query {
    constructor() { }
    static ArcgisQuery(czmObject, index, params, callback) {
        if (this.myEntityCollection == undefined) {
            this.myEntityCollection = new Cesium.CustomDataSource('myEntityCollection');
            window['earth'].czm.viewer.dataSources.add(this.myEntityCollection);
        }
        this.myEntityCollection.entities.removeAll();
        let viewer = window['earth'].czm.viewer;
        let type = czmObject.xbsjImageryProvider.type;
        let url = czmObject.xbsjImageryProvider[type].url;
        let requestUrl = "";
        if (czmObject.xbsjImageryProvider.type == "WebMapTileServiceImageryProvider") {
            requestUrl = url.split('MapServer')[0] + `MapServer/${index}/query?geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&f=pjson`;
        }
        else if (czmObject.xbsjImageryProvider.type == "SSWebMapServiceImageryProvider") {
            requestUrl = url.split('arcgis')[0] + 'arcgis/rest' + url.split('arcgis')[1].split('MapServer')[0] + `MapServer/${index}/query?geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&f=pjson`;
            console.log(requestUrl);
        }
        axios.post(requestUrl, qs.stringify({
            where: params,
            f: 'pjson'
        }), {
            headers: {
                'content-type': 'application/x-www-form-urlencoded',
            }
        }).then(res => {
            console.log(res.data.features);
            let features = res.data.features;
            if (res.data.geometryType == "esriGeometryPoint") {
                features.forEach(feature => {
                    this.myEntityCollection.entities.add({
                        position: Cesium.Cartesian3.fromDegrees(feature.geometry.x, feature.geometry.y),
                        point: {
                            color: Cesium.Color.AQUA,
                            pixelSize: 20,
                            outlineColor: Cesium.Color.YELLOW,
                            outlineWidth: 5,
                            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                            scaleByDistance: new Cesium.NearFarScalar(1500, 1, 20000, 0.3),
                        }
                    });
                });
                viewer.flyTo(this.myEntityCollection);
            }
            if (res.data.geometryType == "esriGeometryPolygon") {
                features.forEach(feature => {
                    let positions = [];
                    feature.geometry.rings[0].forEach(pos => {
                        positions.push(pos[0], pos[1]);
                    });
                    this.myEntityCollection.entities.add({
                        polyline: {
                            positions: Cesium.Cartesian3.fromDegreesArray(positions),
                            width: 10,
                            material: new Cesium.PolylineGlowMaterialProperty({
                                glowPower: 0.2,
                                color: Cesium.Color.BLUE
                            })
                        },
                    });
                });
                viewer.flyTo(this.myEntityCollection);
            }
            if (res.data.geometryType == "esriGeometryPolyline") {
                features.forEach(feature => {
                    let positions = [];
                    feature.geometry.paths[0].forEach(pos => {
                        positions.push(pos[0], pos[1]);
                    });
                    this.myEntityCollection.entities.add({
                        polyline: {
                            positions: Cesium.Cartesian3.fromDegreesArray(positions),
                            width: 10,
                            material: new Cesium.PolylineGlowMaterialProperty({
                                glowPower: 0.2,
                                color: Cesium.Color.BLUE
                            })
                        },
                    });
                });
                viewer.flyTo(this.myEntityCollection);
            }
        });
    }
    static GeoserverQuery(czmObject, params) {
        if (this.myEntityCollection == undefined) {
            this.myEntityCollection = new Cesium.CustomDataSource('myEntityCollection');
            window['earth'].czm.viewer.dataSources.add(this.myEntityCollection);
        }
        this.myEntityCollection.entities.removeAll();
        let viewer = window['earth'].czm.viewer;
        let type = czmObject.xbsjImageryProvider.type;
        let layer = czmObject.xbsjImageryProvider[type].layer;
        let url = czmObject.xbsjImageryProvider[type].url;
        let requestUrl = "";
        if (czmObject.xbsjImageryProvider.type == "WebMapTileServiceImageryProvider") {
            let server = layer.split(':')[0];
            requestUrl = url.split('geoserver')[0] + `geoserver/${server}/wfs?service=wfs&request=GetFeature&version=1.1.0&outputFormat=application/json&TYPENAME=${layer}&cql_filter=${params}`;
        }
        else if (czmObject.xbsjImageryProvider.type == "SSWebMapServiceImageryProvider") {
            let server = url.split('/wms')[0].split('geoserver/')[1];
            requestUrl = url.split('wms')[0] + `wfs?service=wfs&request=GetFeature&version=1.1.0&outputFormat=application/json&TYPENAME=${server}:${layer}&cql_filter=${params}`;
        }
        console.log(requestUrl);
        axios.post(requestUrl).then(res => {
            console.log(res);
            Cesium.GeoJsonDataSource.load(res.data).then(dataSource => {
                dataSource.entities.values.forEach(entity => {
                    this.myEntityCollection.entities.add(entity);
                });
                viewer.flyTo(this.myEntityCollection);
            });
        });
    }
    static clearHighLight() {
        window['earth'].czm.viewer.dataSources.getByName('myEntityCollection')[0].entities.removeAll();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9lcHNwbGFuZXQvc2VydmljZXMvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQTtBQUduQixNQUFNLE9BQU8sS0FBSztJQUVkLGdCQUFnQixDQUFDO0lBUWpCLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUTtRQUNqRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxTQUFTLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDNUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUN2RTtRQUNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDN0MsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDeEMsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQztRQUM5QyxJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ2xELElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtRQUNuQixJQUFJLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLElBQUksa0NBQWtDLEVBQUU7WUFDMUUsVUFBVSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdB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QyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLDJGQUEyRixNQUFNLElBQUksS0FBSyxlQUFlLE1BQU0sRUFBRSxDQUFBO1NBQ3ZLO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2hCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDdEQsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQU14QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQkFDaEQsQ0FBQyxDQUFDLENBQUE7Z0JBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtZQUN6QyxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUlELE1BQU0sQ0FBQyxjQUFjO1FBQ2pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDbEcsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5pbXBvcnQgcXMgZnJvbSAncXMnXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZXJ5IHtcclxuICAgIHN0YXRpYyBteUVudGl0eUNvbGxlY3Rpb246IGFueTsvL+eUqOS6juWtmOWCqOafpeivoui/h+eoi+S4remrmOS6ruaYvuekuueahGVudGl0eVxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICog5Z+65LqOQXJjR0lTIFNlcnZlcueahOafpeivolxyXG4gICAgICogQHBhcmFtIGN6bU9iamVjdCDopoHmn6Xor6LnmoRjem1PYmplY3RcclxuICAgICAqIEBwYXJhbSBpbmRleCBhcmNnaXMgc2VydmVy5Zu+5bGCaWRcclxuICAgICAqIEBwYXJhbSBwYXJhbXMg5p+l6K+i6K+t5Y+lXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sg5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBBcmNnaXNRdWVyeShjem1PYmplY3QsIGluZGV4LCBwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXlFbnRpdHlDb2xsZWN0aW9uID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLm15RW50aXR5Q29sbGVjdGlvbiA9IG5ldyBDZXNpdW0uQ3VzdG9tRGF0YVNvdXJjZSgnbXlFbnRpdHlDb2xsZWN0aW9uJyk7XHJcbiAgICAgICAgICAgIHdpbmRvd1snZWFydGgnXS5jem0udmlld2VyLmRhdGFTb3VyY2VzLmFkZCh0aGlzLm15RW50aXR5Q29sbGVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubXlFbnRpdHlDb2xsZWN0aW9uLmVudGl0aWVzLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIGxldCB2aWV3ZXIgPSB3aW5kb3dbJ2VhcnRoJ10uY3ptLnZpZXdlcjtcclxuICAgICAgICBsZXQgdHlwZSA9IGN6bU9iamVjdC54YnNqSW1hZ2VyeVByb3ZpZGVyLnR5cGU7XHJcbiAgICAgICAgbGV0IHVybCA9IGN6bU9iamVjdC54YnNqSW1hZ2VyeVByb3ZpZGVyW3R5cGVdLnVybDtcclxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IFwiXCJcclxuICAgICAgICBpZiAoY3ptT2JqZWN0Lnhic2pJbWFnZXJ5UHJvdmlkZXIudHlwZSA9PSBcIldlYk1hcFRpbGVTZXJ2aWNlSW1hZ2VyeVByb3ZpZGVyXCIpIHtcclxuICAgICAgICAgICAgcmVxdWVzdFVybCA9IHVybC5zcGxpdCgnTWFwU2VydmVyJylbMF0gKyBgTWFwU2VydmVyLyR7aW5kZXh9L3F1ZXJ5P2dlb21ldHJ5VHlwZT1lc3JpR2VvbWV0cnlFbnZlbG9wZSZpblNSPSZzcGF0aWFsUmVsPWVzcmlTcGF0aWFsUmVsSW50ZXJzZWN0cyZyZWxhdGlvblBhcmFtPSZvdXRGaWVsZHM9JnJldHVybkdlb21ldHJ5PXRydWUmbWF4QWxsb3dhYmxlT2Zmc2V0PSZnZW9tZXRyeVByZWNpc2lvbj0mb3V0U1I9NDMyNiZyZXR1cm5JZHNPbmx5PWZhbHNlJnJldHVybkNvdW50T25seT1mYWxzZSZvcmRlckJ5RmllbGRzPSZncm91cEJ5RmllbGRzRm9yU3RhdGlzdGljcz0mb3V0U3RhdGlzdGljcz0mcmV0dXJuWj1mYWxzZSZyZXR1cm5NPWZhbHNlJmdkYlZlcnNpb249JnJldHVybkRpc3RpbmN0VmFsdWVzPWZhbHNlJmY9cGpzb25gXHJcbiAgICAgICAgfSBlbHNlIGlmIChjem1PYmplY3QueGJzakltYWdlcnlQcm92aWRlci50eXBlID09IFwiU1NXZWJNYXBTZXJ2aWNlSW1hZ2VyeVByb3ZpZGVyXCIpIHtcclxuICAgICAgICAgICAgcmVxdWVzdFVybCA9IHVybC5zcGxpdCgnYXJjZ2lzJylbMF0gKyAnYXJjZ2lzL3Jlc3QnICsgdXJsLnNwbGl0KCdhcmNnaXMnKVsxXS5zcGxpdCgnTWFwU2VydmVyJylbMF0gKyBgTWFwU2VydmVyLyR7aW5kZXh9L3F1ZXJ5P2dlb21ldHJ5VHlwZT1lc3JpR2VvbWV0cnlFbnZlbG9wZSZpblNSPSZzcGF0aWFsUmVsPWVzcmlTcGF0aWFsUmVsSW50ZXJzZWN0cyZyZWxhdGlvblBhcmFtPSZvdXRGaWVsZHM9JnJldHVybkdlb21ldHJ5PXRydWUmbWF4QWxsb3dhYmxlT2Zmc2V0PSZnZW9tZXRyeVByZWNpc2lvbj0mb3V0U1I9NDMyNiZyZXR1cm5JZHNPbmx5PWZhbHNlJnJldHVybkNvdW50T25seT1mYWxzZSZvcmRlckJ5RmllbGRzPSZncm91cEJ5RmllbGRzRm9yU3RhdGlzdGljcz0mb3V0U3RhdGlzdGljcz0mcmV0dXJuWj1mYWxzZSZyZXR1cm5NPWZhbHNlJmdkYlZlcnNpb249JnJldHVybkRpc3RpbmN0VmFsdWVzPWZhbHNlJmY9cGpzb25gO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXF1ZXN0VXJsKVxyXG4gICAgICAgIH1cclxuICAgICAgICBheGlvcy5wb3N0KHJlcXVlc3RVcmwsXHJcbiAgICAgICAgICAgIHFzLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICB3aGVyZTogcGFyYW1zLFxyXG4gICAgICAgICAgICAgICAgZjogJ3Bqc29uJ1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEuZmVhdHVyZXMpXHJcbiAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZXMgPSByZXMuZGF0YS5mZWF0dXJlcztcclxuICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5nZW9tZXRyeVR5cGUgPT0gXCJlc3JpR2VvbWV0cnlQb2ludFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmZWF0dXJlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5teUVudGl0eUNvbGxlY3Rpb24uZW50aXRpZXMuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBDZXNpdW0uQ2FydGVzaWFuMy5mcm9tRGVncmVlcyhmZWF0dXJlLmdlb21ldHJ5LngsIGZlYXR1cmUuZ2VvbWV0cnkueSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENlc2l1bS5Db2xvci5BUVVBLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbFNpemU6IDIwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lQ29sb3I6IENlc2l1bS5Db2xvci5ZRUxMT1csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVXaWR0aDogNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0UmVmZXJlbmNlOiBDZXNpdW0uSGVpZ2h0UmVmZXJlbmNlLkNMQU1QX1RPX0dST1VORCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVCeURpc3RhbmNlOiBuZXcgQ2VzaXVtLk5lYXJGYXJTY2FsYXIoMTUwMCwgMSwgMjAwMDAsIDAuMyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB2aWV3ZXIuZmx5VG8odGhpcy5teUVudGl0eUNvbGxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLmdlb21ldHJ5VHlwZSA9PSBcImVzcmlHZW9tZXRyeVBvbHlnb25cIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb25zID0gW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5yaW5nc1swXS5mb3JFYWNoKHBvcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChwb3NbMF0sIHBvc1sxXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5teUVudGl0eUNvbGxlY3Rpb24uZW50aXRpZXMuYWRkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlsaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiBDZXNpdW0uQ2FydGVzaWFuMy5mcm9tRGVncmVlc0FycmF5KHBvc2l0aW9ucyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsOiBuZXcgQ2VzaXVtLlBvbHlsaW5lR2xvd01hdGVyaWFsUHJvcGVydHkoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG93UG93ZXI6IDAuMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENlc2l1bS5Db2xvci5CTFVFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdlci5mbHlUbyh0aGlzLm15RW50aXR5Q29sbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuZ2VvbWV0cnlUeXBlID09IFwiZXNyaUdlb21ldHJ5UG9seWxpbmVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb25zID0gW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5wYXRoc1swXS5mb3JFYWNoKHBvcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChwb3NbMF0sIHBvc1sxXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5teUVudGl0eUNvbGxlY3Rpb24uZW50aXRpZXMuYWRkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlsaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiBDZXNpdW0uQ2FydGVzaWFuMy5mcm9tRGVncmVlc0FycmF5KHBvc2l0aW9ucyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsOiBuZXcgQ2VzaXVtLlBvbHlsaW5lR2xvd01hdGVyaWFsUHJvcGVydHkoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG93UG93ZXI6IDAuMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENlc2l1bS5Db2xvci5CTFVFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdlci5mbHlUbyh0aGlzLm15RW50aXR5Q29sbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWfuuS6jkdlb3NlcnZlcueahOafpeivolxyXG4gICAgICogQHBhcmFtIGN6bU9iamVjdCBcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBHZW9zZXJ2ZXJRdWVyeShjem1PYmplY3QsIHBhcmFtcykge1xyXG4gICAgICAgIGlmICh0aGlzLm15RW50aXR5Q29sbGVjdGlvbiA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5teUVudGl0eUNvbGxlY3Rpb24gPSBuZXcgQ2VzaXVtLkN1c3RvbURhdGFTb3VyY2UoJ215RW50aXR5Q29sbGVjdGlvbicpO1xyXG4gICAgICAgICAgICB3aW5kb3dbJ2VhcnRoJ10uY3ptLnZpZXdlci5kYXRhU291cmNlcy5hZGQodGhpcy5teUVudGl0eUNvbGxlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm15RW50aXR5Q29sbGVjdGlvbi5lbnRpdGllcy5yZW1vdmVBbGwoKTtcclxuICAgICAgICBsZXQgdmlld2VyID0gd2luZG93WydlYXJ0aCddLmN6bS52aWV3ZXI7XHJcbiAgICAgICAgbGV0IHR5cGUgPSBjem1PYmplY3QueGJzakltYWdlcnlQcm92aWRlci50eXBlO1xyXG4gICAgICAgIGxldCBsYXllciA9IGN6bU9iamVjdC54YnNqSW1hZ2VyeVByb3ZpZGVyW3R5cGVdLmxheWVyO1xyXG4gICAgICAgIGxldCB1cmwgPSBjem1PYmplY3QueGJzakltYWdlcnlQcm92aWRlclt0eXBlXS51cmw7XHJcbiAgICAgICAgbGV0IHJlcXVlc3RVcmwgPSBcIlwiXHJcbiAgICAgICAgaWYgKGN6bU9iamVjdC54YnNqSW1hZ2VyeVByb3ZpZGVyLnR5cGUgPT0gXCJXZWJNYXBUaWxlU2VydmljZUltYWdlcnlQcm92aWRlclwiKSB7XHJcbiAgICAgICAgICAgIC8vYGh0dHA6Ly9sb2NhbGhvc3Q6ODgwMS9nZW9zZXJ2ZXIvdGlnZXIvd2ZzP3NlcnZpY2U9d2ZzJnJlcXVlc3Q9R2V0RmVhdHVyZSZ2ZXJzaW9uPTEuMS4wJm91dHB1dEZvcm1hdD1hcHBsaWNhdGlvbi9qc29uJlRZUEVOQU1FPXRpZ2VyOnBvbHlfbGFuZG1hcmtzJmNxbF9maWx0ZXI9JHtwYXJhbX1gXHJcbiAgICAgICAgICAgIGxldCBzZXJ2ZXIgPSBsYXllci5zcGxpdCgnOicpWzBdXHJcbiAgICAgICAgICAgIHJlcXVlc3RVcmwgPSB1cmwuc3BsaXQoJ2dlb3NlcnZlcicpWzBdICsgYGdlb3NlcnZlci8ke3NlcnZlcn0vd2ZzP3NlcnZpY2U9d2ZzJnJlcXVlc3Q9R2V0RmVhdHVyZSZ2ZXJzaW9uPTEuMS4wJm91dHB1dEZvcm1hdD1hcHBsaWNhdGlvbi9qc29uJlRZUEVOQU1FPSR7bGF5ZXJ9JmNxbF9maWx0ZXI9JHtwYXJhbXN9YFxyXG4gICAgICAgIH0gZWxzZSBpZiAoY3ptT2JqZWN0Lnhic2pJbWFnZXJ5UHJvdmlkZXIudHlwZSA9PSBcIlNTV2ViTWFwU2VydmljZUltYWdlcnlQcm92aWRlclwiKSB7XHJcbiAgICAgICAgICAgIGxldCBzZXJ2ZXIgPSB1cmwuc3BsaXQoJy93bXMnKVswXS5zcGxpdCgnZ2Vvc2VydmVyLycpWzFdO1xyXG4gICAgICAgICAgICByZXF1ZXN0VXJsID0gdXJsLnNwbGl0KCd3bXMnKVswXSArIGB3ZnM/c2VydmljZT13ZnMmcmVxdWVzdD1HZXRGZWF0dXJlJnZlcnNpb249MS4xLjAmb3V0cHV0Rm9ybWF0PWFwcGxpY2F0aW9uL2pzb24mVFlQRU5BTUU9JHtzZXJ2ZXJ9OiR7bGF5ZXJ9JmNxbF9maWx0ZXI9JHtwYXJhbXN9YFxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhyZXF1ZXN0VXJsKVxyXG4gICAgICAgIGF4aW9zLnBvc3QocmVxdWVzdFVybCkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpXHJcbiAgICAgICAgICAgIENlc2l1bS5HZW9Kc29uRGF0YVNvdXJjZS5sb2FkKHJlcy5kYXRhKS50aGVuKGRhdGFTb3VyY2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZS5lbnRpdGllcy52YWx1ZXMuZm9yRWFjaChlbnRpdHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVudGl0eS5wb2x5bGluZS53aWR0aCA9IDEwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW50aXR5LnBvbHlsaW5lLm1hdGVyaWFsID0gbmV3IENlc2l1bS5Qb2x5bGluZUdsb3dNYXRlcmlhbFByb3BlcnR5KHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZ2xvd1Bvd2VyOiAwLjIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbG9yOiBDZXNpdW0uQ29sb3IuQkxVRVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubXlFbnRpdHlDb2xsZWN0aW9uLmVudGl0aWVzLmFkZChlbnRpdHkpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgdmlld2VyLmZseVRvKHRoaXMubXlFbnRpdHlDb2xsZWN0aW9uKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOa4hemZpOmrmOS6rlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2xlYXJIaWdoTGlnaHQoKSB7XHJcbiAgICAgICAgd2luZG93WydlYXJ0aCddLmN6bS52aWV3ZXIuZGF0YVNvdXJjZXMuZ2V0QnlOYW1lKCdteUVudGl0eUNvbGxlY3Rpb24nKVswXS5lbnRpdGllcy5yZW1vdmVBbGwoKVxyXG4gICAgfVxyXG59Il19