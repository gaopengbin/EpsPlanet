import { NzTreeNode } from 'ng-zorro-antd/tree';
import { IdGenerater } from 'epsgis';
import { isArray } from 'lodash';
import { newXbsjFolderNode, newXbsjLayerNode } from '../models/layer-xbsj-func';
export class SceneTreeUtils {
    static SceneTree2NgZorroTree(root) {
        if (!root || !root.children || root.children.length <= 0) {
            return root;
        }
        let rootNode = null;
        if (root.title && root.title !== "未命名") {
            rootNode = new NzTreeNode({
                title: root.title,
                expanded: root.expand === true,
                key: root.guid || root.xbsjGuid || IdGenerater.newGuid(),
                origin: root,
                isLeaf: false,
                parentNode: null
            });
        }
        const _layerNodes = [];
        if (rootNode) {
            rootNode.children.push(...SceneTreeUtils.convertChildren(root.children, rootNode));
            _layerNodes.push(rootNode);
        }
        else {
            _layerNodes.push(...SceneTreeUtils.convertChildren(root.children, rootNode));
        }
        return _layerNodes;
    }
    static convertChildren(children, parentNode) {
        if (!children || children.length <= 0) {
            return [];
        }
        const _layerNodes = [];
        children.forEach(item => {
            let node = null;
            if (item.children) {
                node = new NzTreeNode({
                    title: item.title,
                    expanded: item.expand === true,
                    isChecked: true,
                    key: item.guid || item.xbsjGuid || IdGenerater.newGuid(),
                    origin: item,
                    isLeaf: false,
                    parentNode: parentNode
                });
                if (item.children.length >= 1) {
                    node.children.push(...SceneTreeUtils.convertChildren(item.children, node));
                }
                console.log(node);
                node.isChecked = true;
                _layerNodes.push(node);
            }
            else {
                let childNode = SceneTreeUtils.convertCzmObject(item.czmObject, parentNode);
                childNode.parentNode = childNode.origin.parentNode;
                _layerNodes.push(childNode);
            }
        });
        return _layerNodes;
    }
    static convertCzmObject(czmObject, parentNode) {
        if (!czmObject) {
            return null;
        }
        return new NzTreeNode({
            title: czmObject.name,
            key: czmObject.guid || czmObject.xbsjGuid || IdGenerater.newGuid(),
            origin: czmObject,
            isLeaf: true,
            checked: czmObject.show,
            parentNode: parentNode
        });
    }
    static GetXbsjCzmObject(node) {
        return node && node.origin && node.origin.origin;
    }
    static loadLayers(layerConfig) {
        if (!layerConfig) {
            return null;
        }
        if (!layerConfig.basemaps && !layerConfig.layers) {
            return null;
        }
        const _layerNodes = [];
        const _layerlist = [
            {
                "title": "basemap",
                "ref": "basemap",
                "children": [],
            },
            {
                "title": "layerlist",
                "ref": "layerlist",
                "children": [],
            },
            {
                "tilte": "pin",
                "ref": "pin",
                "children": []
            }
        ];
        if (typeof layerConfig.basemaps === "object" && isArray(layerConfig.basemaps)) {
            layerConfig.basemaps.forEach((item) => {
                _layerlist[0].children.push(SceneTreeUtils.loadLayerNode(item));
            });
        }
        if (typeof layerConfig.layers === "object" && isArray(layerConfig.layers)) {
            layerConfig.layers.forEach((item) => {
                _layerlist[1].children.push(SceneTreeUtils.loadLayerNode(item));
            });
        }
        return { children: _layerlist };
    }
    static loadLayerNode(item) {
        if (isArray(item.children)) {
            const node = newXbsjFolderNode(item.title);
            if (item.children && item.children.length >= 1) {
                item.children.forEach((child) => {
                    node.children.push(SceneTreeUtils.loadLayerNode(child));
                });
            }
            return node;
        }
        else if (item.url || item.layer) {
            const node = newXbsjLayerNode(item.type, item.title, item.url);
            node.czmObject.xbsjGuid = item.guid;
            node.ref = item.ref;
            if (node.czmObject.hasOwnProperty("xbsjImageryProvider")) {
                if (item.srcCoordType) {
                    node.czmObject.xbsjImageryProvider.XbsjImageryProvider.srcCoordType = item.srcCoordType;
                }
                if (item.dstCoordType) {
                    node.czmObject.xbsjImageryProvider.XbsjImageryProvider.dstCoordType = item.dstCoordType;
                }
            }
            else if (node.czmObject.hasOwnProperty("xbsjTerrainProvider")) {
            }
            else if (node.hasOwnProperty("url")) {
            }
            if (item.extendOptions) {
                node.czmObject = Object.assign(node.czmObject, item.extendOptions);
            }
            return node;
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmVUcmVlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZXBzcGxhbmV0L3V0aWxzL3NjZW5lVHJlZS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBTWhGLE1BQU0sT0FBTyxjQUFjO0lBS3ZCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFTO1FBQ2xDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUN0RCxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxRQUFRLEdBQWUsSUFBSSxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtZQUNwQyxRQUFRLEdBQUcsSUFBSSxVQUFVLENBQUM7Z0JBQ3RCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSTtnQkFDOUIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO2dCQUN4RCxNQUFNLEVBQUUsSUFBSTtnQkFDWixNQUFNLEVBQUUsS0FBSztnQkFDYixVQUFVLEVBQUUsSUFBSTthQUNuQixDQUFDLENBQUM7U0FFTjtRQUNELE1BQU0sV0FBVyxHQUFzQixFQUFFLENBQUM7UUFDMUMsSUFB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bUIsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztpQkFDM0Y7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUVuQixJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2lCQUMzRjthQUNKO2lCQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsRUFBRTthQUVoRTtpQkFDSSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7YUFHcEM7WUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN0RTtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOelRyZWVOb2RlIH0gZnJvbSAnbmctem9ycm8tYW50ZC90cmVlJztcbmltcG9ydCB7IElkR2VuZXJhdGVyIH0gZnJvbSAnZXBzZ2lzJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSUxheWVyTm9kZSwgSUxheWVyRm9sZGVyIH0gZnJvbSAnLi4vbW9kZWxzL2xheWVyLWNvbmZpZyc7XG5pbXBvcnQgeyBuZXdYYnNqRm9sZGVyTm9kZSwgbmV3WGJzakxheWVyTm9kZSB9IGZyb20gJy4uL21vZGVscy9sYXllci14YnNqLWZ1bmMnO1xuaW1wb3J0IHsgSVhic2pDem1PYmplY3QgfSBmcm9tICcuLi9tb2RlbHMvbGF5ZXIteGJzaic7XG5cbi8qKlxuICogIOWcuuaZr+agkeW4ruWKqeexuyBjcmVhdGUgYnkgcnVpclxuICovXG5leHBvcnQgY2xhc3MgU2NlbmVUcmVlVXRpbHMge1xuICAgIC8qKlxuICAgICAqIOWwhuWcuuaZr+agkeaVsOaNrui9rOS4um5nWm9ycm/nu5PmnoTnmoTmoJHmlbDmja5cbiAgICAgKiBAcGFyYW0gcm9vdCB0aGlzLnZpZXcuc2NlbmVUcmVlLnJvb3RcbiAgICAgKi9cbiAgICBzdGF0aWMgU2NlbmVUcmVlMk5nWm9ycm9UcmVlKHJvb3Q6IGFueSk6IEFycmF5PE56VHJlZU5vZGU+IHtcbiAgICAgICAgaWYgKCFyb290IHx8ICFyb290LmNoaWxkcmVuIHx8IHJvb3QuY2hpbGRyZW4ubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiByb290O1xuICAgICAgICB9XG4gICAgICAgIGxldCByb290Tm9kZTogTnpUcmVlTm9kZSA9IG51bGw7XG4gICAgICAgIGlmIChyb290LnRpdGxlICYmIHJvb3QudGl0bGUgIT09IFwi5pyq5ZG95ZCNXCIpIHtcbiAgICAgICAgICAgIHJvb3ROb2RlID0gbmV3IE56VHJlZU5vZGUoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiByb290LnRpdGxlLFxuICAgICAgICAgICAgICAgIGV4cGFuZGVkOiByb290LmV4cGFuZCA9PT0gdHJ1ZSxcbiAgICAgICAgICAgICAgICBrZXk6IHJvb3QuZ3VpZCB8fCByb290Lnhic2pHdWlkIHx8IElkR2VuZXJhdGVyLm5ld0d1aWQoKSxcbiAgICAgICAgICAgICAgICBvcmlnaW46IHJvb3QsXG4gICAgICAgICAgICAgICAgaXNMZWFmOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlOiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIHJvb3ROb2RlLmlzRXhwYW5kZWQgPSByb290LmV4cGFuZCA9PT0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfbGF5ZXJOb2RlczogQXJyYXk8TnpUcmVlTm9kZT4gPSBbXTtcbiAgICAgICAgaWYgKHJvb3ROb2RlKSB7XG4gICAgICAgICAgICByb290Tm9kZS5jaGlsZHJlbi5wdXNoKC4uLlNjZW5lVHJlZVV0aWxzLmNvbnZlcnRDaGlsZHJlbihyb290LmNoaWxkcmVuLCByb290Tm9kZSkpO1xuICAgICAgICAgICAgX2xheWVyTm9kZXMucHVzaChyb290Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbGF5ZXJOb2Rlcy5wdXNoKC4uLlNjZW5lVHJlZVV0aWxzLmNvbnZlcnRDaGlsZHJlbihyb290LmNoaWxkcmVuLCByb290Tm9kZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9sYXllck5vZGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW4gXG4gICAgICogQHBhcmFtIHBhcmVudE5vZGUgXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgY29udmVydENoaWxkcmVuKGNoaWxkcmVuOiBBcnJheTxhbnk+LCBwYXJlbnROb2RlOiBhbnkpOiBBcnJheTxOelRyZWVOb2RlPiB7XG4gICAgICAgIGlmICghY2hpbGRyZW4gfHwgY2hpbGRyZW4ubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfbGF5ZXJOb2RlczogQXJyYXk8TnpUcmVlTm9kZT4gPSBbXTtcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGxldCBub2RlOiBOelRyZWVOb2RlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7IC8vfHwgaXRlbS50aXRsZVxuICAgICAgICAgICAgICAgIG5vZGUgPSBuZXcgTnpUcmVlTm9kZSh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBleHBhbmRlZDogaXRlbS5leHBhbmQgPT09IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlzQ2hlY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2tlZDppdGVtLmlzU2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogaXRlbS5ndWlkIHx8IGl0ZW0ueGJzakd1aWQgfHwgSWRHZW5lcmF0ZXIubmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW46IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIGlzTGVhZjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGU6IHBhcmVudE5vZGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jaGlsZHJlbi5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuLnB1c2goLi4uU2NlbmVUcmVlVXRpbHMuY29udmVydENoaWxkcmVuKGl0ZW0uY2hpbGRyZW4sIG5vZGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbm9kZS5pc0V4cGFuZGVkID0gaXRlbS5leHBhbmQgPT09IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobm9kZSlcbiAgICAgICAgICAgICAgICBub2RlLmlzQ2hlY2tlZCA9IHRydWU7Ly/liJ3lp4vpu5jorqTli77pgInniLboioLngrlcbiAgICAgICAgICAgICAgICBfbGF5ZXJOb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL+S5i+WJjeWPtuiKgueCueaLv+S4jeWIsHBhcmVudE5vZGUs5by66KGM5LuO5a6D55qEb3JpZ2lu5Lit5Y+W5YiwcGFyZW50Tm9kZSznlKjkuo7lrp7njrDoioLngrnnmoTljZXpgIlcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGROb2RlID0gU2NlbmVUcmVlVXRpbHMuY29udmVydEN6bU9iamVjdChpdGVtLmN6bU9iamVjdCwgcGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUucGFyZW50Tm9kZSA9IGNoaWxkTm9kZS5vcmlnaW4ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBfbGF5ZXJOb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICAgICAgLy8gX2xheWVyTm9kZXMucHVzaChTY2VuZVRyZWVVdGlscy5jb252ZXJ0Q3ptT2JqZWN0KGl0ZW0uY3ptT2JqZWN0LCBwYXJlbnROb2RlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX2xheWVyTm9kZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjem1PYmplY3QgXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgY29udmVydEN6bU9iamVjdChjem1PYmplY3Q6IGFueSwgcGFyZW50Tm9kZTogTnpUcmVlTm9kZSk6IE56VHJlZU5vZGUge1xuICAgICAgICBpZiAoIWN6bU9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBOelRyZWVOb2RlKHtcbiAgICAgICAgICAgIHRpdGxlOiBjem1PYmplY3QubmFtZSxcbiAgICAgICAgICAgIGtleTogY3ptT2JqZWN0Lmd1aWQgfHwgY3ptT2JqZWN0Lnhic2pHdWlkIHx8IElkR2VuZXJhdGVyLm5ld0d1aWQoKSxcbiAgICAgICAgICAgIG9yaWdpbjogY3ptT2JqZWN0LFxuICAgICAgICAgICAgaXNMZWFmOiB0cnVlLFxuICAgICAgICAgICAgLy8gY2hlY2tlZDogY3ptT2JqZWN0LmlzU2VsZWN0ZWQsXG4gICAgICAgICAgICBjaGVja2VkOiBjem1PYmplY3Quc2hvdyxcbiAgICAgICAgICAgIHBhcmVudE5vZGU6IHBhcmVudE5vZGVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRYYnNqQ3ptT2JqZWN0KG5vZGU6IE56VHJlZU5vZGUpIHtcbiAgICAgICAgLy8gcmV0dXJuIG5vZGU/Lm9yaWdpbj8ub3JpZ2luO1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLm9yaWdpbiAmJiBub2RlLm9yaWdpbi5vcmlnaW47XG4gICAgfVxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8qKlxuICAgICAqIOWbvuWxguWKoOi9vVxuICAgICAqIEBwYXJhbSBsYXllckNvbmZpZyBcbiAgICAgKi9cbiAgICBzdGF0aWMgbG9hZExheWVycyhsYXllckNvbmZpZzogYW55KSB7XG4gICAgICAgIGlmICghbGF5ZXJDb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbGF5ZXJDb25maWcuYmFzZW1hcHMgJiYgIWxheWVyQ29uZmlnLmxheWVycykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2xheWVyTm9kZXM6IEFycmF5PGFueT4gPSBbXTtcbiAgICAgICAgLy/lm7rlrprlupXlm77lkozlhbbku5blm77lsYLliIbnu4RcbiAgICAgICAgY29uc3QgX2xheWVybGlzdCA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiYmFzZW1hcFwiLFxuICAgICAgICAgICAgICAgIFwicmVmXCI6IFwiYmFzZW1hcFwiLFxuICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJsYXllcmxpc3RcIixcbiAgICAgICAgICAgICAgICBcInJlZlwiOiBcImxheWVybGlzdFwiLFxuICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidGlsdGVcIjogXCJwaW5cIixcbiAgICAgICAgICAgICAgICBcInJlZlwiOiBcInBpblwiLFxuICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuXG4gICAgICAgIC8v5bqV5Zu+XG4gICAgICAgIGlmICh0eXBlb2YgbGF5ZXJDb25maWcuYmFzZW1hcHMgPT09IFwib2JqZWN0XCIgJiYgaXNBcnJheShsYXllckNvbmZpZy5iYXNlbWFwcykpIHtcbiAgICAgICAgICAgIGxheWVyQ29uZmlnLmJhc2VtYXBzLmZvckVhY2goKGl0ZW06IElMYXllck5vZGUgfCBJTGF5ZXJGb2xkZXIpID0+IHtcbiAgICAgICAgICAgICAgICBfbGF5ZXJsaXN0WzBdLmNoaWxkcmVuLnB1c2goU2NlbmVUcmVlVXRpbHMubG9hZExheWVyTm9kZShpdGVtKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL+WbvuWxglxuICAgICAgICBpZiAodHlwZW9mIGxheWVyQ29uZmlnLmxheWVycyA9PT0gXCJvYmplY3RcIiAmJiBpc0FycmF5KGxheWVyQ29uZmlnLmxheWVycykpIHtcbiAgICAgICAgICAgIGxheWVyQ29uZmlnLmxheWVycy5mb3JFYWNoKChpdGVtOiBJTGF5ZXJOb2RlIHwgSUxheWVyRm9sZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgX2xheWVybGlzdFsxXS5jaGlsZHJlbi5wdXNoKFNjZW5lVHJlZVV0aWxzLmxvYWRMYXllck5vZGUoaXRlbSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgY2hpbGRyZW46IF9sYXllcmxpc3QgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogXG4gICAgICovXG4gICAgc3RhdGljIGxvYWRMYXllck5vZGUoaXRlbTogSUxheWVyTm9kZSB8IElMYXllckZvbGRlcikge1xuICAgICAgICBpZiAoaXNBcnJheShpdGVtLmNoaWxkcmVuKSkge1xuICAgICAgICAgICAgLy/nm67lvZVcbiAgICAgICAgICAgIGNvbnN0IG5vZGU6IElMYXllckZvbGRlciA9IG5ld1hic2pGb2xkZXJOb2RlKGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6IElMYXllck5vZGUgfCBJTGF5ZXJGb2xkZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKFNjZW5lVHJlZVV0aWxzLmxvYWRMYXllck5vZGUoY2hpbGQpKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnVybCB8fCBpdGVtLmxheWVyKSB7XG4gICAgICAgICAgICAvL+WbvuWxglxuICAgICAgICAgICAgLy8gdGlhbmRpdHUg6ZyA6KaB5bCGbGF5ZXLovazmjaLkuLp1cmxcblxuICAgICAgICAgICAgY29uc3Qgbm9kZTogSVhic2pDem1PYmplY3QgPSBuZXdYYnNqTGF5ZXJOb2RlKGl0ZW0udHlwZSwgaXRlbS50aXRsZSwgaXRlbS51cmwpO1xuICAgICAgICAgICAgbm9kZS5jem1PYmplY3QueGJzakd1aWQgPSBpdGVtLmd1aWQ7XG4gICAgICAgICAgICBub2RlLnJlZiA9IGl0ZW0ucmVmO1xuICAgICAgICAgICAgaWYgKG5vZGUuY3ptT2JqZWN0Lmhhc093blByb3BlcnR5KFwieGJzakltYWdlcnlQcm92aWRlclwiKSkge1xuICAgICAgICAgICAgICAgIC8v5b2x5YOP5Zu+5bGC5aSE55CGXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uc3JjQ29vcmRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5Y6f5Z2Q5qCH57O7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY3ptT2JqZWN0Lnhic2pJbWFnZXJ5UHJvdmlkZXIuWGJzakltYWdlcnlQcm92aWRlci5zcmNDb29yZFR5cGUgPSBpdGVtLnNyY0Nvb3JkVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZHN0Q29vcmRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v6L2s5o2i55uu5qCH5Z2Q5qCH57O7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY3ptT2JqZWN0Lnhic2pJbWFnZXJ5UHJvdmlkZXIuWGJzakltYWdlcnlQcm92aWRlci5kc3RDb29yZFR5cGUgPSBpdGVtLmRzdENvb3JkVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuY3ptT2JqZWN0Lmhhc093blByb3BlcnR5KFwieGJzalRlcnJhaW5Qcm92aWRlclwiKSkge1xuICAgICAgICAgICAgICAgIC8v5Zyw5b2i5Zu+5bGC5aSE55CGXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLmhhc093blByb3BlcnR5KFwidXJsXCIpKSB7XG4gICAgICAgICAgICAgICAgLy/nk6bniYflm77lsYLlpITnkIZcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uZXh0ZW5kT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIG5vZGUuY3ptT2JqZWN0ID0gT2JqZWN0LmFzc2lnbihub2RlLmN6bU9iamVjdCwgaXRlbS5leHRlbmRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn0iXX0=