import { MapManagerService } from './map-manager.service';
import { WidgetManagerService } from './widget-manager.service';
import { PanelManagerService } from './panel-manager.service';
import { ComponentRef } from '@angular/core';
import { UtilsService } from './utils.service';
import { HttpReqService } from './request.service';
import { EventEmitterService } from './event-emitter.service';
import { CommonService } from './common.service';
import { AppGlobalConfig } from '../models/app-config';
import { ComponentLoaderService } from './component-loader.service';
import { OnScreenWidgetIconComponent } from '../components/on-screen-widget-icon/on-screen-widget-icon.component';
import * as i0 from "@angular/core";
export declare class LayoutManagerService {
    private panelManager;
    private widgetManager;
    private utils;
    private httpService;
    private globalParams;
    eventService: EventEmitterService;
    private commonService;
    private mapManager;
    private componentLoader;
    map: any;
    view: any;
    mapId: string;
    widgetPlaceholders: Array<any>;
    preloadWidgetIcons: Array<ComponentRef<OnScreenWidgetIconComponent>>;
    preloadGroupPanels: Array<any>;
    invisibleWidgetIds: Array<any>;
    id: string;
    urlParams: any;
    appConfig: any;
    constructor(panelManager: PanelManagerService, widgetManager: WidgetManagerService, utils: UtilsService, httpService: HttpReqService, globalParams: AppGlobalConfig, eventService: EventEmitterService, commonService: CommonService, mapManager: MapManagerService, componentLoader: ComponentLoaderService);
    startup(): void;
    resize(): void;
    onAppConfigLoaded(config: any): void;
    onAppConfigChanged(params: any): void;
    _loadMap(): void;
    onMapLoaded(map: any): void;
    onMapChanged(map: any): void;
    onViewChanged(view: any): void;
    _loadPreloadWidgets(appConfig: any): Promise<any>;
    _hideLoading(): void;
    _doPostLoad(): void;
    _loadPreloadWidget(widgetConfig: any, appConfig: any): Promise<any>;
    _createPreloadWidgetPlaceHolder(widgetConfig: any): void;
    _createPreloadWidgetIcon(widgetConfig: any, component?: any): any;
    _onDestroyPlaceholder(placeholder: any): void;
    _onDestroyIcon(icon: any): void;
    _loadPreloadGroup(groupJson: any, appConfig: any): Promise<any> | {
        resolve: any;
        reject: any;
        promise: () => Promise<any>;
    };
    _getThemeCommonStyleId(theme: any): string;
    _getThemeCurrentStyleId(theme: any): string;
    _loadTheme(theme: any): void;
    _loadThemeCommonStyle(theme: any): void;
    _removeThemeCommonStyle(theme: any): void;
    _loadThemeCurrentStyle(theme: any): void;
    _removeThemeCurrentStyle(theme: any): void;
    _destroyPreloadWidgetIcons(): void;
    _destroyOffPanelWidgets(): void;
    _destroyWidgetPlaceholders(): void;
    _destroyPreloadPanels(): void;
    _destroyPreloadGroupPanels(): void;
    _onThemeChange(appConfig: any): void;
    _onLayoutChange2(appConfig: any): void;
    _onLayoutChange(appConfig: any): void;
    _onStyleChange(appConfig: any): void;
    _changeMapPosition(appConfig: any): void;
    _onMapChange(appConfig: any): void;
    _onWidgetPoolChange(appConfig: any, changeData?: any): void;
    _onActionTriggerd(appConfig: any, action: any, eleid: any): void;
    _onWidgetChange(appConfig: any, changeData: any, action: any): void;
    static ɵfac: i0.ɵɵFactoryDef<LayoutManagerService, never>;
    static ɵprov: i0.ɵɵInjectableDef<LayoutManagerService>;
}
//# sourceMappingURL=layout-manager.service.d.ts.map