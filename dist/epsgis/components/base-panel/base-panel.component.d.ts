import { OnInit, ComponentRef, ViewContainerRef, ElementRef, Renderer2, AfterViewInit } from '@angular/core';
import { BaseWidgetComponent } from '../base-widget/base-widget.component';
import { WidgetWindowState, WidgetState } from '../../models/base-widget';
import { PanelOptions, PanelPosition, PanelInMobileShowMode, PanelDockMode } from '../../models/base-panel';
import { OnScreenWidgetIconComponent } from '../on-screen-widget-icon/on-screen-widget-icon.component';
import { ChangeDetectorRef } from "@angular/core";
import { BaseWidget } from '../base-widget';
import * as i0 from "@angular/core";
export declare class BasePanelComponent extends BaseWidget implements OnInit, AfterViewInit {
    _render: Renderer2;
    cdr: ChangeDetectorRef;
    options: PanelOptions;
    widget: ComponentRef<BaseWidgetComponent>;
    widgetContainer: ViewContainerRef;
    sspanelOverlay: ElementRef;
    sspanel_titlebar: ElementRef;
    sspanel: ElementRef;
    panelContainer: Element;
    protected currentPosition: PanelPosition;
    protected savedPosition: PanelPosition;
    protected currentSize: {
        width: any;
        height: any;
    };
    protected savedSize: {
        width: any;
        height: any;
    };
    protected tempSavedData: any;
    protected isMouseEvent: boolean;
    protected originalPosition: PanelPosition;
    dockMode: PanelDockMode;
    _isRunInMobile: boolean;
    _mobileShowMode: PanelInMobileShowMode;
    panelIcon: OnScreenWidgetIconComponent;
    constructor(_render: Renderer2, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    setPosition(positionConfig: any): void;
    protected _setPCPosition(): void;
    protected _setMobilePosition(): void;
    private loadAllWidgetsInOrder;
    private getAllWidgetConfigs;
    isDockable(): boolean;
    startup(): void;
    setWidget(widget: ComponentRef<BaseWidgetComponent>): void;
    setOptions(options: PanelOptions): void;
    setWindowState(state: WidgetWindowState): void;
    setState(state: WidgetState): void;
    protected showPanel(): void;
    protected hidePanel(): void;
    closePanel(event: any): void;
    onNormalize(): void;
    onMinimize(): void;
    onMaximize(): void;
    resize(position?: any): void;
    onResize(): void;
    onActive(): void;
    onDeActive(): void;
    onCollapse(): void;
    onExpand(): void;
    onMove(): void;
    onPositionChange(position: any): void;
    onOpen(): void;
    onClose(): void;
    onMouseEnter(target: any): void;
    onMouseLeave(): void;
    private _getCurrentPosition;
    private _setCurrentPosition;
    private _saveCurrentPosition;
    private _restoreSavedPosition;
    private _changePosition;
    private _getWindowSize;
    private _getCurrentSize;
    private _saveCurrentSize;
    private _setCurrentSize;
    private _restoreSavedSize;
    protected _convertToStyleVal(val: any): string;
    private _changeSize;
    private _getBordersWidth;
    private _getBorderWidth;
    _contentClick(evt: MouseEvent): void;
    _titlebar_MouseDown(event: MouseEvent): void;
    _resizer_MouseDown(event: MouseEvent, resizeParams: {
        dimension?: string;
        directionX?: string;
        directionY?: string;
    }): void;
    private _addDocumentMouseEventHandlers;
    private _eventTempData;
    private xxxx;
    private yyyy;
    private _document_MouseMove;
    private _document_MouseUp;
    private _setIframeStyle;
    private _isDockSide;
    protected _maximize(): Promise<void>;
    protected _unmaximize(): Promise<void>;
    private _minimize;
    private _unminimize;
    protected _collapse(): Promise<void>;
    protected _uncollapse(): Promise<void>;
    _buttonMax_Click(event: any): void;
    _buttonCollapse_Click(event: any): void;
    _buttonMin_Click(event: any): void;
    openWidgetSetting(): void;
    static ɵfac: i0.ɵɵFactoryDef<BasePanelComponent, [{ optional: true; }, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDefWithMeta<BasePanelComponent, never, never, {}, {}, never>;
}
//# sourceMappingURL=base-panel.component.d.ts.map