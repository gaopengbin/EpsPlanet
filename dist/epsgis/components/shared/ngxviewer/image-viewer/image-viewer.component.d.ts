import { OnInit, EventEmitter } from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from "@angular/platform-browser";
import { EventEmitterService } from '../../../../services/event-emitter.service';
import * as i0 from "@angular/core";
export declare class ImageViewerComponent implements OnInit {
    domSanitizer: DomSanitizer;
    private eventService;
    imageViewerContainer: any;
    showImg: any;
    width: number;
    height: number;
    source: string[];
    first: number;
    ready: EventEmitter<any>;
    private currentImage;
    imageSources: SafeResourceUrl[];
    currentImageUrl: SafeResourceUrl;
    private radian;
    private x;
    private y;
    private zoom;
    private initTop;
    private initLeft;
    moreImgInitLeft: number;
    private currentImageTempTop;
    private currentImageTempLeft;
    private dragStartClientX;
    private dragStartClientY;
    private isStartMove;
    imageViewHeight: string;
    mainWindowHeight: number;
    constructor(domSanitizer: DomSanitizer, eventService: EventEmitterService);
    ngOnInit(): void;
    private convertUrl;
    changeImageSources(sources: string[]): void;
    currentImageLoaded(img: HTMLImageElement, viewer: HTMLDivElement): void;
    preOrNextImg(type: string): void;
    changeCurrentImg(): void;
    getMatrix(radian: number, x: number, y: number): any;
    vertical(): void;
    horizontal(): void;
    rotate(radian: number): void;
    rotateLeftBy90(): void;
    rotateRightBy90(): void;
    rotateByDegress(degress: number): void;
    getZoom(scale: number, zoom: number): number;
    scale(zoom: number): void;
    zoomin(): void;
    zoomout(): void;
    reset(): void;
    imageZoomin(): void;
    imageZoomout(): void;
    rotateLeft(): void;
    rotateRight(): void;
    flipVertical(): void;
    flipHorizontal(): void;
    currentImgReset(): void;
    previousImg(moreImg: HTMLDivElement, viewer: HTMLDivElement): void;
    nextImg(moreImg: HTMLDivElement, viewer: HTMLDivElement): void;
    changeCurrentImageUrl(imgUrl: string, index: number): void;
    changeCurrentIndex(index: number): void;
    currentImageZoomByWheel(e: any): void;
    currentImageDragStart(e: MouseEvent): void;
    setImageHeight(): void;
    currentImageDrag(e: MouseEvent): void;
    currentImageDragEnd(e: MouseEvent): void;
    cancleCurrentImageDrag(e: DragEvent): void;
    getMainWindowHeight(): number;
    checkBrowser(): any;
    static ɵfac: i0.ɵɵFactoryDef<ImageViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<ImageViewerComponent, "image-viewer", never, { "width": "width"; "height": "height"; "source": "source"; "first": "first"; }, { "ready": "ready"; }, never, never>;
}
//# sourceMappingURL=image-viewer.component.d.ts.map