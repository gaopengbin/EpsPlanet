import * as _ from "lodash";
import { InjectionToken, Injectable } from '@angular/core';
import { LogService } from "../utils/console-log";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export const AppGlobalConfigToken = new InjectionToken('app_global_config');
const defaultGlobalConfigPath = "assets/global.json";
const defuaultConfigPath = "assets/config.json";
export class AppInitService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getPath() {
        let fullPath, path;
        fullPath = window.location.pathname;
        if (fullPath === '/' || fullPath.substr(fullPath.length - 1) === '/') {
            path = fullPath;
        }
        else {
            let sections = fullPath.split('/');
            path = sections.join('/') + '/';
        }
        return path;
    }
    getUrlParams() {
        let s = window.location.search, p;
        if (s === '') {
            s = window.location.hash;
            if (s && s.indexOf('?') > 0) {
                s = s.substring(s.indexOf('?'));
            }
        }
        if (s === '') {
            return {};
        }
        p = new Object();
        if (s.indexOf("?") != -1) {
            let strs = s.substr(1).split("&");
            for (let i = 0; i < strs.length; i++) {
                p[strs[i].split("=")[0]] = decodeURIComponent((strs[i].split("=")[1]));
            }
        }
        return p;
    }
    init(__config) {
        let __mergedConfig = _.cloneDeep(defaultAppGlobalConfig);
        if (!__mergedConfig.path) {
            __mergedConfig.path = __mergedConfig.appInfo.path = this.getPath();
        }
        __mergedConfig.urlParams = _.merge(__mergedConfig.urlParams, this.getUrlParams());
        if (__mergedConfig.jimuConfig.isDesignMode === true
            && typeof __mergedConfig.urlParams.config === "string" && __mergedConfig.urlParams.config.length >= 1) {
            __mergedConfig.appInfo.configFile = "./project/" + __mergedConfig.urlParams.config + "/config.json";
            __mergedConfig.appInfo.extendInitjs = "./project/" + __mergedConfig.urlParams.config + "/thirdpartyLibs/init.js";
            __mergedConfig.appInfo.folderUrlPrefix = "./project/" + __mergedConfig.urlParams.config;
        }
        if (__config) {
            __mergedConfig = _.merge(__mergedConfig, __config);
        }
        this._mergedConfig = __mergedConfig;
        return this;
    }
    loadGlobalConfig() {
        return new Promise((resolve, reject) => {
            this._mergedConfig.globalConfigFilePath = this._mergedConfig.globalConfigFilePath || defaultGlobalConfigPath;
            if (this._mergedConfig.globalConfigFilePath) {
                this.httpClient.get(this._mergedConfig.globalConfigFilePath).toPromise().then((cfg) => {
                    if (cfg) {
                        this._mergedConfig = Object.assign(Object.assign({}, this._mergedConfig), cfg);
                        if (cfg.title) {
                            document.title = cfg.title;
                        }
                    }
                    LogService.overwriteLog(this._mergedConfig.log);
                    resolve(true);
                }).catch(err => {
                    console.log("配置文件global.json读取失败");
                    resolve(true);
                });
            }
            else {
                console.log("没有global.json");
                resolve(true);
            }
        });
    }
    getConfig() {
        return this._mergedConfig;
    }
}
AppInitService.ɵfac = function AppInitService_Factory(t) { return new (t || AppInitService)(i0.ɵɵinject(i1.HttpClient)); };
AppInitService.ɵprov = i0.ɵɵdefineInjectable({ token: AppInitService, factory: AppInitService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AppInitService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.HttpClient }]; }, null); })();
export class AppGlobalConfig {
}
AppGlobalConfig.ɵfac = function AppGlobalConfig_Factory(t) { return new (t || AppGlobalConfig)(); };
AppGlobalConfig.ɵprov = i0.ɵɵdefineInjectable({ token: AppGlobalConfig, factory: AppGlobalConfig.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AppGlobalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
export const defaultAppGlobalConfig = {
    title: "EPSGIS",
    subtitle: "山维科技",
    logo: "",
    apiRootUrl: "",
    widgetRootPath: "widgets",
    wabVersion: undefined,
    path: "",
    urlParams: {
        mode: ""
    },
    jimuConfig: {
        zIndex: "auto",
        isDesignMode: false,
        isSettings: false,
        mapId: "mapContainer"
    },
    appInfo: {
        path: "",
        configFile: defuaultConfigPath,
        extendInitjs: "",
        folderUrlPrefix: "",
        appPath: "",
        isRunInMobile: false
    },
    dojoConfig: {
        locale: ""
    },
    epsoConfig: {
        showWorkAreaInAddUser: true,
        defaultCityCode: "520100"
    },
    globalConfigFilePath: defaultGlobalConfigPath,
    menuConfig: {
        notReuseRoutes: [],
        notShowInTabRoutes: [],
        menuData: []
    },
    mapConfig: {
        is3D: false,
        jsApi: ""
    },
    log: true
};
//# sourceMappingURL=data:application/json;base64,