class SimpleLoaderService {
    constructor() {
    }
    static getInstance() {
        if (!this._instance) {
            this._instance = new SimpleLoaderService();
        }
        return this._instance;
    }
    is(type, obj) {
        let clas = Object.prototype.toString.call(obj).slice(8, -1);
        return obj !== undefined && obj !== null && clas === type;
    }
    isArray(item) {
        return this.is("Array", item);
    }
    getExtension(url) {
        url = url || "";
        let items = url.split("?")[0].split(".");
        return items[items.length - 1].toLowerCase();
    }
    createElement(config) {
        let e = document.createElement(config.element);
        for (let i in config) {
            if (i !== 'element' && i !== 'appendTo') {
                e[i] = config[i];
            }
        }
        let root = document.getElementsByTagName(config.appendTo)[0];
        return (typeof root.appendChild(e) === 'object');
    }
    elementLoaded(url, onLoad) {
        if (onLoad) {
            onLoad(url);
        }
    }
    elementReadyStateChanged(url, thisObj, onLoad) {
        if (thisObj.readyState === 'loaded' || thisObj.readyState === 'complete') {
            this.elementLoaded(url, onLoad);
        }
    }
    loadCss(url, onLoad) {
        let result = this.createElement({
            element: 'link',
            rel: 'stylesheet',
            type: 'text/css',
            href: url,
            onload: () => {
                this.elementLoaded(url, onLoad);
            },
            appendTo: 'head'
        });
        let ti = setInterval(() => {
            let styles = document.styleSheets;
            for (let i = 0; i < styles.length; i++) {
                if (styles[i].href &&
                    styles[i].href.substr(styles[i].href.indexOf(url), styles[i].href.length) === url) {
                    clearInterval(ti);
                    this.elementLoaded(url, onLoad);
                }
            }
        }, 500);
        return result;
    }
    loadJs(url, onLoad) {
        let result = this.createElement({
            element: 'script',
            type: 'text/javascript',
            onload: () => {
                this.elementLoaded(url, onLoad);
            },
            onreadystatechange: () => {
                this.elementReadyStateChanged(url, this, onLoad);
            },
            src: url,
            appendTo: 'body'
        });
        return result;
    }
    loadResources(ress, onOneBeginLoad, onOneLoad, onLoad) {
        let loaded = [];
        const checkHaveLoaded = (url) => {
            for (let i = 0; i < loaded.length; i++) {
                if (loaded[i] === url) {
                    return true;
                }
            }
            return false;
        };
        const _onOneLoad = (url) => {
            if (checkHaveLoaded(url)) {
                return;
            }
            loaded.push(url);
            if (onOneLoad) {
                onOneLoad(url, loaded.length);
            }
            if (loaded.length === ress.length) {
                if (onLoad) {
                    onLoad();
                }
            }
        };
        for (let i = 0; i < ress.length; i++) {
            this.loadResource(ress[i], onOneBeginLoad, _onOneLoad);
        }
    }
    loadResource(url, onBeginLoad, onLoad) {
        if (onBeginLoad) {
            onBeginLoad(url);
        }
        let type = this.getExtension(url);
        if (type.toLowerCase() === 'css') {
            this.loadCss(url, onLoad);
        }
        else {
            this.loadJs(url, onLoad);
        }
    }
}
SimpleLoaderService._instance = null;
export const simpleLoader = SimpleLoaderService.getInstance();
//# sourceMappingURL=data:application/json;base64,