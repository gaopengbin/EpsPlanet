import { Injectable } from '@angular/core';
import { WidgetPosition } from '../models/base-widget';
import { isPlatform } from '../utils/platform';
import * as i0 from "@angular/core";
import * as i1 from "./utils.service";
import * as i2 from "./platform.service";
export class CommonService {
    constructor(utils, platform) {
        this.utils = utils;
        this.platform = platform;
    }
    createPromiseDefer() {
        let resolve, reject;
        const promise = new Promise(function () {
            resolve = arguments[0];
            reject = arguments[1];
        });
        return {
            resolve: resolve,
            reject: reject,
            promise: () => promise
        };
    }
    getComponentRootNode(componentRef) {
        if (!componentRef) {
            console.log('componentRef undefined');
            return null;
        }
        return componentRef.hostView.rootNodes[0];
    }
    getElementBounds(ele) {
        if (!ele)
            return null;
        const rect = ele.getBoundingClientRect();
        const top = document.documentElement.clientTop;
        const left = document.documentElement.clientLeft;
        return {
            top: rect.top - top,
            left: rect.left - left,
            bottom: rect.bottom - top,
            right: rect.right - left,
            width: rect.width,
            height: rect.height
        };
    }
    getPx(px) {
        if (!px)
            return "0px";
        if (typeof px === "string" && px.indexOf("px") >= 0) {
            return px;
        }
        if (px.toString().indexOf("%") >= 0 || px === "auto")
            return px;
        if (typeof px === "number")
            return px + "px";
        let _temp = parseFloat(px);
        if (isNaN(_temp)) {
            return "0px";
        }
        return _temp + "px";
    }
    getPxNumber(px) {
        if (!px)
            return 0;
        if (typeof px === "string" && px.indexOf("px") >= 0) {
            return parseInt(px, 10);
        }
        if (px.toString().indexOf("%") >= 0 || px === "auto")
            return px;
        if (typeof px === "number")
            return px;
        let _temp = parseFloat(px.toString());
        if (isNaN(_temp)) {
            return 0;
        }
        return _temp;
    }
    getPosition(positionConfig) {
        let _position = new WidgetPosition();
        if (positionConfig.top || positionConfig.top == 0) {
            _position.top = this.getPx(positionConfig.top);
        }
        if (positionConfig.left || positionConfig.left == 0) {
            _position.left = this.getPx(positionConfig.left);
        }
        if (positionConfig.right || positionConfig.right == 0) {
            _position.right = this.getPx(positionConfig.right);
        }
        if (positionConfig.bottom || positionConfig.bottom == 0) {
            _position.bottom = this.getPx(positionConfig.bottom);
        }
        if (positionConfig.width || positionConfig.width == 0) {
            _position.width = this.getPx(positionConfig.width);
        }
        else {
            _position.width = "100%";
        }
        if (positionConfig.height || positionConfig.height == 0) {
            _position.height = this.getPx(positionConfig.height);
        }
        else {
            _position.height = "100%";
        }
        if (positionConfig.zIndex || positionConfig.zIndex == 0) {
            _position.zIndex = positionConfig.zIndex;
        }
        return _position;
    }
    setWidgetPosition(compRef, widgetPosition) {
        let ele = this.getComponentRootNode(compRef);
        let css = this.utils.getPositionStyle(widgetPosition);
        ele.style.position = "absolute";
        if (css.top || css.top == 0) {
            ele.style.top = css.top;
        }
        if (css.right || css.right == 0) {
            ele.style.right = css.right;
        }
        if (css.bottom || css.bottom == 0) {
            ele.style.bottom = css.bottom;
        }
        if (css.left || css.left == 0) {
            ele.style.left = css.left;
        }
        if (css.width || css.width == 0) {
            ele.style.width = css.width;
        }
        if (css.height || css.height == 0) {
            ele.style.height = css.height;
        }
        if (css.zIndex || css.zIndex == 0) {
            ele.style.zIndex = css.zIndex;
        }
    }
    is(platformName) {
        return isPlatform(this.win, platformName);
    }
    getPlatformName() {
        if (this.isAndroid())
            return 'android';
        if (this.isIos())
            return 'ios';
        if (!this.isMobile())
            return 'browser';
        return 'unknown';
    }
    isMobileNotTablet() {
        return this.isMobile()
            && this.platform.is("ipad") == false
            && this.platform.is("phablet") == false
            && this.platform.is("tablet") == false;
    }
    isMobile() {
        return this.platform.is("mobile") || this.platform.is("mobileweb");
    }
    isMobileRealMachine() {
        return this.platform.is('mobile') && !this.platform.is('mobileweb');
    }
    isAndroid() {
        return this.isMobileRealMachine() && this.platform.is('android');
    }
    isIos() {
        return this.isMobileRealMachine() && (this.platform.is('ios') || this.platform.is('ipad') || this.platform.is('iphone'));
    }
}
CommonService.ɵfac = function CommonService_Factory(t) { return new (t || CommonService)(i0.ɵɵinject(i1.UtilsService), i0.ɵɵinject(i2.PlatformService)); };
CommonService.ɵprov = i0.ɵɵdefineInjectable({ token: CommonService, factory: CommonService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CommonService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.UtilsService }, { type: i2.PlatformService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,