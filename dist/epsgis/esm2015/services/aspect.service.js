class AspectService {
    constructor() {
        this.nextId = 0;
        this.after = this._aspect("after");
        this.before = this._aspect("after");
        this.around = this._aspect("around");
    }
    static getInstance() {
        if (!this._instance) {
            this._instance = new AspectService();
        }
        return this._instance;
    }
    advise(dispatcher, type, advice, receiveArguments) {
        let previous = dispatcher[type];
        let around = type == "around";
        let signal;
        if (around) {
            let advised = advice(() => {
                return previous.advice(this, arguments);
            });
            signal = {
                remove: () => {
                    if (advised) {
                        advised = dispatcher = advice = null;
                    }
                },
                advice: (target, args) => {
                    return advised ?
                        advised.apply(target, args) :
                        previous.advice(target, args);
                }
            };
        }
        else {
            signal = {
                remove: () => {
                    if (signal.advice) {
                        let previous = signal.previous;
                        let next = signal.next;
                        if (!next && !previous) {
                            delete dispatcher[type];
                        }
                        else {
                            if (previous) {
                                previous.next = next;
                            }
                            else {
                                dispatcher[type] = next;
                            }
                            if (next) {
                                next.previous = previous;
                            }
                        }
                        dispatcher = advice = signal.advice = null;
                    }
                },
                id: dispatcher.nextId++,
                advice: advice,
                receiveArguments: receiveArguments
            };
        }
        if (previous && !around) {
            if (type == "after") {
                previous.next = signal;
                signal.previous = previous;
            }
            else if (type == "before") {
                dispatcher[type] = signal;
                signal.next = previous;
                previous.previous = signal;
            }
        }
        else {
            dispatcher[type] = signal;
        }
        return signal;
    }
    _aspect(type) {
        return (target, methodName, advice, receiveArguments) => {
            let existing = target[methodName], dispatcher;
            if (!existing || existing.target != target) {
                target[methodName] = dispatcher = () => {
                    let executionId = dispatcher.nextId;
                    let args = arguments;
                    let before = dispatcher.before;
                    while (before) {
                        if (before.advice) {
                            args = before.advice.apply(this, args) || args;
                        }
                        before = before.next;
                    }
                    if (dispatcher.around) {
                        let results = dispatcher.around.advice(this, args);
                    }
                    let after = dispatcher.after;
                    while (after && after.id < executionId) {
                        if (after.advice) {
                            if (after.receiveArguments) {
                                let newResults = after.advice.apply(this, args);
                                results = newResults === undefined ? results : newResults;
                            }
                            else {
                                results = after.advice.call(this, results, args);
                            }
                        }
                        after = after.next;
                    }
                    return results;
                };
                if (existing) {
                    dispatcher.around = {
                        advice: (target, args) => {
                            return existing.apply(target, args);
                        }
                    };
                }
                dispatcher.target = target;
                dispatcher.nextId = dispatcher.nextId || 0;
            }
            let results = this.advise((dispatcher || existing), type, advice, receiveArguments);
            advice = null;
            return results;
        };
    }
}
AspectService._instance = null;
export let aspect = AspectService.getInstance();
export class TestAspect {
    constructor() {
        console.log("TestAspect constructor");
    }
    testBefore() {
        console.log("TestAspect testBefore");
    }
    testAfter() {
        console.log("TestAspect testAfter");
    }
    testAround() {
        console.log("TestAspect testAround");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9lcHNnaXMvc2VydmljZXMvYXNwZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxhQUFhO0lBT2Y7UUFMQSxXQUFNLEdBQVcsQ0FBQyxDQUFDO1FBc0puQixVQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5QixXQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQixXQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQW5KaEMsQ0FBQztJQUNELE1BQU0sQ0FBQyxXQUFXO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFRTyxNQUFNLENBQUMsVUFBZSxFQUFFLElBQVksRUFBRSxNQUFnQixFQUFFLGdCQUEwQjtRQUN0RixJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLFFBQVEsQ0FBQztRQUM5QixJQUFJLE1BQU0sQ0FBQztRQUNYLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUUsRUFBRTtnQkFDckIsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sR0FBRztnQkFDTCxNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUNULElBQUksT0FBTyxFQUFFO3dCQUNULE9BQU8sR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztxQkFDeEM7Z0JBQ0wsQ0FBQztnQkFDRCxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7b0JBRXJCLE9BQU8sT0FBTyxDQUFDLENBQUM7d0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDN0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3RDLENBQUM7YUFDSixDQUFDO1NBQ0w7YUFBTTtZQUVILE1BQU0sR0FBRztnQkFDTCxNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUNULElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFDZixJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO3dCQUMvQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUN2QixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFOzRCQUNwQixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDM0I7NkJBQU07NEJBQ0gsSUFBSSxRQUFRLEVBQUU7Z0NBQ1YsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7NkJBQ3hCO2lDQUFNO2dDQUNILFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7NkJBQzNCOzRCQUNELElBQUksSUFBSSxFQUFFO2dDQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOzZCQUM1Qjt5QkFDSjt3QkFHRCxVQUFVLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO3FCQUM5QztnQkFDTCxDQUFDO2dCQUNELEVBQUUsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUN2QixNQUFNLEVBQUUsTUFBTTtnQkFDZCxnQkFBZ0IsRUFBRSxnQkFBZ0I7YUFDckMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFO2dCQUdqQixRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDdkIsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7YUFDOUI7aUJBQU0sSUFBSSxJQUFJLElBQUksUUFBUSxFQUFFO2dCQUV6QixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO2dCQUMxQixNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztnQkFDdkIsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7YUFDOUI7U0FDSjthQUFNO1lBRUgsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUM3QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFLTyxPQUFPLENBQUMsSUFBWTtRQU94QixPQUFPLENBQUMsTUFBVyxFQUFFLFVBQWtCLEVBQUUsTUFBZ0IsRUFBRSxnQkFBMEIsRUFBRSxFQUFFO1lBQ3JGLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUM7WUFDOUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRTtnQkFFeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsR0FBRyxHQUFFLEVBQUU7b0JBQ2xDLElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7b0JBRXBDLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQztvQkFDckIsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztvQkFDL0IsT0FBTyxNQUFNLEVBQUU7d0JBQ1gsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFOzRCQUNmLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDO3lCQUNsRDt3QkFDRCxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztxQkFDeEI7b0JBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO3dCQUNuQixJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7cUJBQ3REO29CQUVELElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7b0JBQzdCLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxFQUFFLEdBQUcsV0FBVyxFQUFFO3dCQUNwQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7NEJBQ2QsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7Z0NBQ3hCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztnQ0FFaEQsT0FBTyxHQUFHLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDOzZCQUM3RDtpQ0FBTTtnQ0FDSCxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQzs2QkFDcEQ7eUJBQ0o7d0JBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7cUJBQ3RCO29CQUNELE9BQU8sT0FBTyxDQUFDO2dCQUNuQixDQUFDLENBQUM7Z0JBQ0YsSUFBSSxRQUFRLEVBQUU7b0JBQ1YsVUFBVSxDQUFDLE1BQU0sR0FBRzt3QkFDaEIsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFOzRCQUNyQixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO3dCQUN4QyxDQUFDO3FCQUNKLENBQUM7aUJBQ0w7Z0JBQ0QsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQzNCLFVBQVUsQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7YUFDOUM7WUFDRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUNwRixNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ2QsT0FBTyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7QUFqSmMsdUJBQVMsR0FBa0IsSUFBSSxDQUFDO0FBcUxuRCxNQUFNLENBQUMsSUFBSSxNQUFNLEdBQUcsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRWhELE1BQU0sT0FBTyxVQUFVO0lBQ25CO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFDRCxVQUFVO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFDRCxTQUFTO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFDRCxVQUFVO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogY3JlYXRlIGJ5IHJ1aXIgMTkxMTA1IOa6kOiHqmRvam8vYXNwZWN0LmpzXHJcbiAqIOaPkOS+m+mdouWQkeWIh+mdoueahOe8lueoi+WKn+iDve+8jOWFgeiuuOWcqOebruagh+WvueixoeeahOaWueazleWJjeOAgeWQjuOAgeWPiuWRqOWbtOaPkuWFpeimgeaJp+ihjOeahOWHveaVsFxyXG4gKi9cclxuY2xhc3MgQXNwZWN0U2VydmljZSB7XHJcblxyXG4gICAgbmV4dElkOiBudW1iZXIgPSAwO1xyXG4gICAgLyoqXHJcbiAgICAqIOWNleS+i1xyXG4gICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogQXNwZWN0U2VydmljZSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEFzcGVjdFNlcnZpY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDliIfpnaLlh73mlbBcclxuICAgICAqIEBwYXJhbSBkaXNwYXRjaGVyIOebruagh1xyXG4gICAgICogQHBhcmFtIHR5cGUg57G75Z6L77yMYWZ0ZXIsYmVmb3JlLGFyb3VuZFxyXG4gICAgICogQHBhcmFtIGFkdmljZSDopoHliIflhaXnmoTlh73mlbBcclxuICAgICAqIEBwYXJhbSByZWNlaXZlQXJndW1lbnRzIOaYr+WQpui/lOWbnuWHveaVsFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFkdmlzZShkaXNwYXRjaGVyOiBhbnksIHR5cGU6IHN0cmluZywgYWR2aWNlOiBGdW5jdGlvbiwgcmVjZWl2ZUFyZ3VtZW50cz86IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgcHJldmlvdXMgPSBkaXNwYXRjaGVyW3R5cGVdO1xyXG4gICAgICAgIGxldCBhcm91bmQgPSB0eXBlID09IFwiYXJvdW5kXCI7XHJcbiAgICAgICAgbGV0IHNpZ25hbDtcclxuICAgICAgICBpZiAoYXJvdW5kKSB7XHJcbiAgICAgICAgICAgIGxldCBhZHZpc2VkID0gYWR2aWNlKCgpPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzLmFkdmljZSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkdmlzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWR2aXNlZCA9IGRpc3BhdGNoZXIgPSBhZHZpY2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhZHZpY2U6ICh0YXJnZXQsIGFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL+S4gOaXpuiwg+eUqHJlbW92Ze+8jGFkdmljZWTlj5jkuLrnqbrvvIzkvr/kvJrot7Pov4fmnKzmrKHnjq/nu5XpgJrnn6XvvIzov5vlhaXkuIrkuIDlsYLnmoRhZHZpY2Xmlrnms5XjgIJcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWR2aXNlZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkdmlzZWQuYXBwbHkodGFyZ2V0LCBhcmdzKSA6ICAvLyDosIPnlKjliIflhaXnmoTlh73mlbBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMuYWR2aWNlKHRhcmdldCwgYXJncyk7IC8vIOW3suWPlua2iO+8jOi3s+iHs+S4i+S4gOS4qlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOWIm+W7uuenu+mZpOS6i+S7tlxyXG4gICAgICAgICAgICBzaWduYWwgPSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsLmFkdmljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJldmlvdXMgPSBzaWduYWwucHJldmlvdXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gc2lnbmFsLm5leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCAmJiAhcHJldmlvdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkaXNwYXRjaGVyW3R5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXJbdHlwZV0gPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnByZXZpb3VzID0gcHJldmlvdXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOenu+mZpOWQjiDnva7kuLrnqbpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlciA9IGFkdmljZSA9IHNpZ25hbC5hZHZpY2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpZDogZGlzcGF0Y2hlci5uZXh0SWQrKyxcclxuICAgICAgICAgICAgICAgIGFkdmljZTogYWR2aWNlLFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZUFyZ3VtZW50czogcmVjZWl2ZUFyZ3VtZW50c1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJldmlvdXMgJiYgIWFyb3VuZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PSBcImFmdGVyXCIpIHtcclxuICAgICAgICAgICAgICAgIC8v5bCG5L6m5ZCs5Zmo5re75Yqg5Yiw5YiX6KGo55qE5pyr5bC+XHJcbiAgICAgICAgICAgICAgICAvL+azqOaEj++8jOaIkeS7rOW/hemhu+WvueatpOW+queOr+i/m+ihjOS4gOS6m+abtOaUue+8jOS7peino+WGs+S4gOS4quWlh+aAqueahElFMTAgSklU6ZSZ6K+vIHdoaWxlIChwcmV2aW91cy5uZXh0ICYmIChwcmV2aW91cyA9IHByZXZpb3VzLm5leHQpKSB7IH1cclxuICAgICAgICAgICAgICAgIHByZXZpb3VzLm5leHQgPSBzaWduYWw7XHJcbiAgICAgICAgICAgICAgICBzaWduYWwucHJldmlvdXMgPSBwcmV2aW91cztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IFwiYmVmb3JlXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIOa3u+WKoOWIsOW8gOWktFxyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hlclt0eXBlXSA9IHNpZ25hbDtcclxuICAgICAgICAgICAgICAgIHNpZ25hbC5uZXh0ID0gcHJldmlvdXM7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5wcmV2aW91cyA9IHNpZ25hbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8v5pu/5o2i5YmN5ZCO5oiW56ys5LiA5LiqXHJcbiAgICAgICAgICAgIGRpc3BhdGNoZXJbdHlwZV0gPSBzaWduYWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaWduYWw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWIh+mdolxyXG4gICAgICogQHBhcmFtIHR5cGUg57G75Z6LIGFmdGVyLGJlZm9yZSxhcm91bmRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfYXNwZWN0KHR5cGU6IHN0cmluZykge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0YXJnZXQg55uu5qCH5a+56LGhXHJcbiAgICAgICAgICogQG1ldGhvZE5hbWUg5Ye95pWw5ZCNXHJcbiAgICAgICAgICogQGFkdmljZSDopoHliIflhaXlvpflh73mlbBcclxuICAgICAgICAgKiBAcmVjZWl2ZUFyZ3VtZW50cyDmmK/lkKbkvKDlhaXljp/lp4vlj4LmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXR1cm4gKHRhcmdldDogYW55LCBtZXRob2ROYW1lOiBzdHJpbmcsIGFkdmljZTogRnVuY3Rpb24sIHJlY2VpdmVBcmd1bWVudHM/OiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBleGlzdGluZyA9IHRhcmdldFttZXRob2ROYW1lXSwgZGlzcGF0Y2hlcjtcclxuICAgICAgICAgICAgaWYgKCFleGlzdGluZyB8fCBleGlzdGluZy50YXJnZXQgIT0gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyDov5jmsqHmnInosIPluqZcclxuICAgICAgICAgICAgICAgIHRhcmdldFttZXRob2ROYW1lXSA9IGRpc3BhdGNoZXIgPSAoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBleGVjdXRpb25JZCA9IGRpc3BhdGNoZXIubmV4dElkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlZm9yZSBhZHZpY2VcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYmVmb3JlID0gZGlzcGF0Y2hlci5iZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJlZm9yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLmFkdmljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGJlZm9yZS5hZHZpY2UuYXBwbHkodGhpcywgYXJncykgfHwgYXJncztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSBiZWZvcmUubmV4dDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXJvdW5kIGFkdmljZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXNwYXRjaGVyLmFyb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0cyA9IGRpc3BhdGNoZXIuYXJvdW5kLmFkdmljZSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgYWR2aWNlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFmdGVyID0gZGlzcGF0Y2hlci5hZnRlcjtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYWZ0ZXIgJiYgYWZ0ZXIuaWQgPCBleGVjdXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIuYWR2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIucmVjZWl2ZUFyZ3VtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdSZXN1bHRzID0gYWZ0ZXIuYWR2aWNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOS7heW9k+i/lOWbnuaWsOWAvOaXtuaJjeabtOaUuei/lOWbnuWAvFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXdSZXN1bHRzID09PSB1bmRlZmluZWQgPyByZXN1bHRzIDogbmV3UmVzdWx0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IGFmdGVyLmFkdmljZS5jYWxsKHRoaXMsIHJlc3VsdHMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gYWZ0ZXIubmV4dDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlci5hcm91bmQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkdmljZTogKHRhcmdldCwgYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLmFwcGx5KHRhcmdldCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hlci50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaGVyLm5leHRJZCA9IGRpc3BhdGNoZXIubmV4dElkIHx8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSB0aGlzLmFkdmlzZSgoZGlzcGF0Y2hlciB8fCBleGlzdGluZyksIHR5cGUsIGFkdmljZSwgcmVjZWl2ZUFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIGFkdmljZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBhZnRlciA9IHRoaXMuX2FzcGVjdChcImFmdGVyXCIpO1xyXG5cclxuICAgIGJlZm9yZSA9IHRoaXMuX2FzcGVjdChcImFmdGVyXCIpO1xyXG5cclxuICAgIGFyb3VuZCA9IHRoaXMuX2FzcGVjdChcImFyb3VuZFwiKTtcclxuXHJcbn1cclxuLy8g56S65L6LOlxyXG4vLyDnrKzkuIDmraXlr7zlhaXlupNcclxuLy8gaW1wb3J0IHsgYXNwZWN0IH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvYXNwZWN0LnNlcnZpY2UnO1xyXG5cclxuLy9hZnRlciBcclxuLy8gbGV0IHNpZ25hbCA9IGFzcGVjdC5hZnRlcih0YXJnZXRPYmplY3QsIFwibWV0aG9kTmFtZVwiLCAoc29tZUFyZ3VtZW50KT0+e1xyXG4vLyAgICAgLy/lsIblnKjosIPnlKh0YXJnZXRPYmplY3QubWV0aG9kTmFtZSgp5ZCO5omn6KGMXHJcbi8vIH0pO1xyXG4vL1xyXG5cclxuLy9cdOi/lOWbnueahOWvueixoeWPr+eUqOS6juenu+mZpOe7keWumuOAglxyXG4vLyAgc2lnbmFsLnJlbW92ZSgpOyAvL+enu+mZpFxyXG4vL1x0XHJcbi8vYmVmb3JlXHJcbi8vIGFzcGVjdC5iZWZvcmUodGFyZ2V0T2JqZWN0LCBcIm1ldGhvZE5hbWVcIiwgKHNvbWVBcmd1bWVudCk9PntcclxuLy8gXHRcdC8v5bCG5Zyo6LCD55SodGFyZ2V0T2JqZWN0Lm1ldGhvZE5hbWUoKeWJjeaJp+ihjFxyXG4vLyB9KTtcclxuXHJcbi8vYXJvdW5kXHJcbi8vIGFzcGVjdC5hcm91bmQodGFyZ2V0T2JqZWN0LCBcIm1ldGhvZE5hbWVcIiwgIChvcmlnaW5hbEZvbykoKT0+IHtcclxuLy8gICAgIHJldHVybiAgKCk9PiB7XHJcbi8vICAgICAgICAgbGV0IHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7Ly/osIPnlKh0YXJnZXRPYmplY3QubWV0aG9kTmFtZSgp5YmN5omn6KGMXHJcbi8vICAgICAgICAgbGV0IHJlc3VsdHMgPSBvcmlnaW5hbEZvby5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvL+iwg+eUqOWOn+Wni+aWueazlXRhcmdldE9iamVjdC5tZXRob2ROYW1lKClcclxuLy8gICAgICAgICBsZXQgZW5kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7Ly/osIPnlKh0YXJnZXRPYmplY3QubWV0aG9kTmFtZSgp5ZCO5omn6KGMXHJcbi8vICAgICAgICAgY29uc29sZS5sb2coXCJtZXRob2ROYW1lIGV4ZWN1dGlvbiB0b29rIFwiICsgKGVuZCAtIHN0YXJ0KSArIFwiIG1zXCIpO1xyXG4vLyAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4vLyAgICAgfTtcclxuLy8gfSk7XHJcbmV4cG9ydCBsZXQgYXNwZWN0ID0gQXNwZWN0U2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRlc3RBc3BlY3R7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGVzdEFzcGVjdCBjb25zdHJ1Y3RvclwiKVxyXG4gICAgfVxyXG4gICAgdGVzdEJlZm9yZSgpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGVzdEFzcGVjdCB0ZXN0QmVmb3JlXCIpXHJcbiAgICB9XHJcbiAgICB0ZXN0QWZ0ZXIoKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlRlc3RBc3BlY3QgdGVzdEFmdGVyXCIpXHJcbiAgICB9XHJcbiAgICB0ZXN0QXJvdW5kKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJUZXN0QXNwZWN0IHRlc3RBcm91bmRcIilcclxuICAgIH1cclxufSJdfQ==