import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { isPlatform, getPlatforms } from "../utils/platform";
import * as i0 from "@angular/core";
export class PlatformService {
    constructor(doc, zone) {
        this.doc = doc;
        this.backButton = new Subject();
        this.pause = new Subject();
        this.resume = new Subject();
        this.resize = new Subject();
        zone.run(() => {
            this.win = doc.defaultView;
            this.backButton.subscribeWithPriority = function (priority, callback) {
                return this.subscribe(ev => (ev.register(priority, () => zone.run(callback))));
            };
            proxyEvent(this.pause, doc, 'pause');
            proxyEvent(this.resume, doc, 'resume');
            proxyEvent(this.backButton, doc, 'ionBackButton');
            proxyEvent(this.resize, this.win, 'resize');
            let readyResolve;
            this._readyPromise = new Promise(res => { readyResolve = res; });
            if (this.win && this.win['cordova']) {
                doc.addEventListener('deviceready', () => {
                    readyResolve('cordova');
                }, { once: true });
            }
            else {
                readyResolve('dom');
            }
        });
    }
    is(platformName) {
        return isPlatform(this.win, platformName);
    }
    platforms() {
        return getPlatforms(this.win);
    }
    ready() {
        return this._readyPromise;
    }
    get isRTL() {
        return this.doc.dir === 'rtl';
    }
    getQueryParam(key) {
        return readQueryParam(this.win.location.href, key);
    }
    isLandscape() {
        return !this.isPortrait();
    }
    isPortrait() {
        return this.win.matchMedia && this.win.matchMedia('(orientation: portrait)').matches;
    }
    testUserAgent(expression) {
        const nav = this.win.navigator;
        return !!(nav && nav.userAgent && nav.userAgent.indexOf(expression) >= 0);
    }
    url() {
        return this.win.location.href;
    }
    width() {
        return this.win.innerWidth;
    }
    height() {
        return this.win.innerHeight;
    }
}
PlatformService.ɵfac = function PlatformService_Factory(t) { return new (t || PlatformService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone)); };
PlatformService.ɵprov = i0.ɵɵdefineInjectable({ token: PlatformService, factory: PlatformService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PlatformService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i0.NgZone }]; }, null); })();
const readQueryParam = (url, key) => {
    key = key.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    const regex = new RegExp('[\\?&]' + key + '=([^&#]*)');
    const results = regex.exec(url);
    return results ? decodeURIComponent(results[1].replace(/\+/g, ' ')) : null;
};
const proxyEvent = (emitter, el, eventName) => {
    if (el) {
        el.addEventListener(eventName, (ev) => {
            emitter.next(ev != null ? ev.detail : undefined);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,