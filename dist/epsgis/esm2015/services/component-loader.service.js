import { Injectable, Injector } from '@angular/core';
import { findComponentInfo } from '../decorator/component-register.decorator';
import * as i0 from "@angular/core";
export class ComponentLoaderService {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerInHome = null;
        this.viewContainerInMap = null;
        this.serviceInjector = null;
        this.factories = null;
        this.factoriesArray = null;
        this.factories = this.componentFactoryResolver["_factories"];
        if (this.factories) {
            this.factoriesArray = Array.from(this.factories);
        }
    }
    createComponent(component, params, container) {
        let inputs = {};
        if (params) {
            inputs = params;
        }
        let inputProviders = Object.keys(inputs).map((inputName) => {
            return { provide: inputName, useValue: inputs[inputName] };
        });
        const injector = Injector.create({ providers: inputProviders, parent: container === null || container === void 0 ? void 0 : container.parentInjector });
        const factory = this.componentFactoryResolver.resolveComponentFactory(component);
        const compRef = factory.create(injector);
        if (typeof compRef.instance.setServiceInjector === "function") {
            compRef.instance.setServiceInjector(this.serviceInjector);
        }
        return compRef;
    }
    getComponentPath(name) {
        const compInfo = findComponentInfo(name);
        if (compInfo) {
            return compInfo.path || compInfo.uri;
        }
        const comp = this.findComponent(name);
        if (comp) {
            return (typeof comp.getCompInfo === "function") ? comp.getCompInfo().path : "";
        }
        return "";
    }
    findComponent(name) {
        let comp = null;
        if (this.factories) {
            if (!this.factories || this.factories.size <= 0)
                return null;
            let item = this.factoriesArray.find((value, index, arr) => {
                return value[1].selector.toLowerCase() === name.toLowerCase();
            });
            if (item) {
                comp = item[0];
            }
        }
        else {
            const compInfo = findComponentInfo(name);
            if (compInfo) {
                return compInfo.component;
            }
        }
        return comp;
    }
    getServiceInjector() {
        return this.serviceInjector;
    }
    setServiceInjector(serviceInjector) {
        this.serviceInjector = serviceInjector;
    }
    setViewContainerInHome(container) {
        this.viewContainerInHome = container;
    }
    createComponentToHome(component, params) {
        return this.createComponent(component, params, this.viewContainerInHome);
    }
    showInHome(compRef) {
        if (!compRef) {
            return;
        }
        if (!this.viewContainerInHome) {
            console.error("未设置容器，无法显示组件");
            return;
        }
        this.viewContainerInHome.insert(compRef.hostView);
    }
    setViewContainerInMap(container) {
        this.viewContainerInMap = container;
    }
    createComponentToMap(component, params) {
        return this.createComponent(component, params, this.viewContainerInMap);
    }
    showInMap(compRef) {
        if (!compRef) {
            return;
        }
        if (!this.viewContainerInMap) {
            console.error("未设置容器，无法显示组件");
            return;
        }
        this.viewContainerInMap.insert(compRef.hostView);
    }
    ngOnDestroy() {
        if (this.viewContainerInHome) {
            this.viewContainerInHome.clear();
        }
        if (this.viewContainerInMap) {
            this.viewContainerInMap.clear();
        }
    }
}
ComponentLoaderService.ɵfac = function ComponentLoaderService_Factory(t) { return new (t || ComponentLoaderService)(i0.ɵɵinject(i0.ComponentFactoryResolver)); };
ComponentLoaderService.ɵprov = i0.ɵɵdefineInjectable({ token: ComponentLoaderService, factory: ComponentLoaderService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ComponentLoaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i0.ComponentFactoryResolver }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,