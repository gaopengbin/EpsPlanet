import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./request.service";
export class AuthService {
    constructor(req) {
        this.req = req;
        this._tokenKey = "";
        this._userKey = "__current_user";
        this._currentUser = null;
        this._tokenKey = this.req.getTokenKey();
    }
    saveInfo2Local(key, data) {
        if (window.sessionStorage) {
            sessionStorage.setItem(key, JSON.stringify(data));
        }
        else {
            console.log("浏览器不支持sessionStorage");
        }
    }
    getInfoFromLocal(key) {
        if (window.sessionStorage) {
            return sessionStorage.getItem(key);
        }
        else {
            console.log("浏览器不支持sessionStorage");
        }
        return "";
    }
    saveToken(data) {
        this.saveInfo2Local(this._tokenKey, data);
        this.req.setAccessToken(data.access_token);
    }
    getLocalToken() {
        let str = this.getInfoFromLocal(this._tokenKey);
        if (str != "") {
            return JSON.parse(str);
        }
        return null;
    }
    refreshToken(refresh_token) {
        return new Promise((resolve, reject) => {
            this.req.get('epsoffice/token/refresh', { "refresh_token": refresh_token }).then(result => {
                if (result.success) {
                    this.saveToken(result.data);
                }
                resolve(result);
            }).catch(err => reject(err));
        });
    }
    userLogin(username, password) {
        return new Promise((resolve, reject) => {
            this.req.post("epsoffice/user/login", { "username": username, "password": password })
                .then(result => {
                if (result.success) {
                    this._currentUser = result.data;
                    this.saveInfo2Local(this._userKey, result.data);
                    this.saveToken(result.data.token);
                }
                resolve(result);
            }).catch(reject);
        });
    }
    checkLogin() {
        return this.req.get("epsoffice/user/login/validate");
    }
    logout() {
        return new Promise((resove, reject) => {
            this.req.post("epsoffice/user/logout").then(result => {
                if (result.success) {
                    this.removeToken();
                }
                resove(result.success);
            }).catch(err => {
                console.error(err);
                resove(false);
            });
        });
    }
    removeToken() {
        this._currentUser = null;
        this.req.setAccessToken("");
        sessionStorage.removeItem(this._tokenKey);
        sessionStorage.removeItem(this._userKey);
    }
    getRemoteUser() {
        return new Promise((resolve, reject) => {
            this.req.get("epsoffice/user/login/info").then(result => {
                if (result.success) {
                    this._currentUser = result.data;
                    this.saveInfo2Local(this._userKey, result.data);
                    this._currentUser.token = this.getLocalToken();
                    resolve(result.data);
                }
                else {
                    console.error(result.msg);
                    resolve(null);
                }
            }).catch(err => {
                console.error(err);
                resolve(null);
            });
        });
    }
    getCurrentUser() {
        if (this._currentUser) {
            return this._currentUser;
        }
        const str = this.getInfoFromLocal(this._userKey);
        if (str) {
            const _user = JSON.parse(str);
            this._currentUser = _user;
            this._currentUser.token = this.getLocalToken();
        }
        return this._currentUser;
    }
}
AuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpReqService)); };
AuthService.ɵprov = i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AuthService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpReqService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,