import { Injectable } from '@angular/core';
import { HttpParams, HttpHeaders } from '@angular/common/http';
import { OrderByType } from '../models/http/request.result';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../models/models";
export class HttpReqService {
    constructor(httpClient, config) {
        this.httpClient = httpClient;
        this.config = config;
        this.ServiceUrl = '';
        this.headers = new HttpHeaders().set("Content-type", "application/json; charset=UTF-8");
        this._tokenKey = "__token";
        this._tokenValue = "";
        this.ServiceUrl = config.apiRootUrl;
    }
    getLocalToken() {
        if (window.sessionStorage) {
            let str = sessionStorage.getItem(this._tokenKey);
            if (str != "") {
                return JSON.parse(str);
            }
        }
        else {
            console.log("浏览器不支持sessionStorage");
        }
        return null;
    }
    getTokenKey() {
        return this._tokenKey;
    }
    setAccessToken(token) {
        this._tokenValue = token;
    }
    getAccessToken() {
        let token = "";
        if (this._tokenValue) {
            token = this._tokenValue;
        }
        else {
            let m = this.getLocalToken();
            if (m) {
                this.setAccessToken(m.access_token);
                token = m.access_token;
            }
        }
        return token;
    }
    getAuthHeaders() {
        return this.headers.set("Authorization", `Bearer ${this.getAccessToken()}`);
    }
    getJsonFile(configFilePath) {
        return this.httpClient.get(configFilePath, { responseType: 'json' }).toPromise();
    }
    _toHttpParams(paras) {
        if (!paras)
            return null;
        let obj = {};
        paras.forEach(x => {
            obj[x.name] = x.value;
        });
        return new HttpParams({ fromObject: obj });
    }
    _toParaString(para) {
        if (!para || para.length <= 0)
            return '';
        let str = '';
        para.forEach(s => {
            str += `&${s.name}=${s.value}`;
        });
        return str.substring(1);
    }
    _toHttpParams2(para) {
        let _httpParams = null;
        if (typeof para === "string") {
            _httpParams = new HttpParams({ fromString: para });
        }
        else {
            _httpParams = new HttpParams({ fromObject: para });
        }
        return _httpParams;
    }
    _toParaString2(para) {
        if (!para)
            return '';
        if (typeof para === "string") {
            if (para.startsWith("&") || para.startsWith("?")) {
                return para.substring(1);
            }
            return para;
        }
        else {
            let str = '';
            for (const key in para) {
                if (para.hasOwnProperty(key)) {
                    str += `&${key}=${para[key]}`;
                }
            }
            return str.substring(1);
        }
    }
    getNoAuthGeneric(apiName, para, serviceUrl) {
        let url = this.ServiceUrl;
        if (serviceUrl)
            url = serviceUrl;
        return this.httpClient.get(`${url}/${apiName}`, {
            headers: this.headers,
            params: this._toHttpParams2(para)
        }).toPromise();
    }
    getNoAuth(apiName, para, serviceUrl) {
        return this.getNoAuthGeneric(apiName, para, serviceUrl);
    }
    getGeneric(apiName, para, serviceUrl) {
        let url = this.ServiceUrl;
        if (serviceUrl)
            url = serviceUrl;
        return this.httpClient.get(`${url}/${apiName}`, {
            headers: this.getAuthHeaders(),
            params: this._toHttpParams2(para)
        }).toPromise();
    }
    get(apiName, para, serviceUrl) {
        return this.getGeneric(apiName, para, serviceUrl);
    }
    getPage(apiName, pageIndex, pageSize, orderBy, direction, para, serviceUrl) {
        if (pageIndex <= 0) {
            pageIndex = 1;
        }
        if (pageSize <= 0) {
            pageSize = 20;
        }
        let pager = {
            page: pageIndex.toString(),
            size: pageSize.toString(),
            orderby: orderBy ? orderBy : "",
            direction: direction === OrderByType.desc ? "1" : "0"
        };
        let paraString = this._toParaString2(pager);
        if (para) {
            paraString = paraString + "&" + this._toParaString2(para);
        }
        return this.getGeneric(apiName, paraString, serviceUrl);
    }
    postNoAuthGeneric(apiName, para, serviceUrl, receiveAsObject) {
        let url = this.ServiceUrl;
        if (typeof serviceUrl === 'string' && serviceUrl)
            url = serviceUrl;
        if (receiveAsObject === true || (typeof serviceUrl === 'boolean' && serviceUrl === true)) {
            return this.httpClient.post(`${url}/${apiName}`, para, { headers: this.headers }).toPromise();
        }
        else {
            return this.httpClient.post(`${url}/${apiName}`, this._toParaString2(para), {
                headers: {
                    'Content-Type': "application/x-www-form-urlencoded;charset=UTF-8"
                }
            }).toPromise();
        }
    }
    postNoAuth(apiName, para, serviceUrl, receiveAsObject) {
        return this.postNoAuthGeneric(apiName, para, serviceUrl, receiveAsObject);
    }
    postGeneric(apiName, para, serviceUrl, receiveAsObject) {
        let url = this.ServiceUrl;
        if (typeof serviceUrl === 'string' && serviceUrl)
            url = serviceUrl;
        if (receiveAsObject === true || (typeof serviceUrl === 'boolean' && serviceUrl === true)) {
            return this.httpClient.post(`${url}/${apiName}`, para, { headers: this.getAuthHeaders() }).toPromise();
        }
        else {
            return this.httpClient.post(`${url}/${apiName}`, this._toParaString2(para), {
                headers: {
                    'Content-Type': "application/x-www-form-urlencoded;charset=UTF-8",
                    "Authorization": `Bearer ${this.getAccessToken()}`
                }
            }).toPromise();
        }
    }
    post(apiName, para, serviceUrl, receiveAsObject) {
        return this.postGeneric(apiName, para, serviceUrl, receiveAsObject);
    }
    postPage(apiName, pageIndex, pageSize, orderBy, direction, para, serviceUrl, receiveAsObject) {
        if (pageIndex <= 0) {
            pageIndex = 1;
        }
        if (pageSize <= 0) {
            pageSize = 20;
        }
        let pager = {
            page: pageIndex.toString(),
            size: pageSize.toString(),
            orderby: orderBy ? orderBy : "",
            direction: direction === OrderByType.desc ? "1" : "0"
        };
        let paraString = this._toParaString2(pager);
        if (para) {
            paraString = paraString + "&" + this._toParaString2(para);
        }
        return this.postGeneric(apiName, paraString, serviceUrl, receiveAsObject);
    }
    deleteGeneric(apiName, para, serviceUrl) {
        let url = this.ServiceUrl;
        if (serviceUrl)
            url = serviceUrl;
        return this.httpClient.delete(`${url}/${apiName}`, {
            params: this._toHttpParams2(para),
            headers: {
                "Authorization": `Bearer ${this.getAccessToken()}`
            }
        }).toPromise();
    }
    delete(apiName, para, serviceUrl) {
        return this.deleteGeneric(apiName, para, serviceUrl);
    }
}
HttpReqService.ɵfac = function HttpReqService_Factory(t) { return new (t || HttpReqService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppGlobalConfig)); };
HttpReqService.ɵprov = i0.ɵɵdefineInjectable({ token: HttpReqService, factory: HttpReqService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(HttpReqService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.AppGlobalConfig }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,