import { Injectable, Injector, SkipSelf, Optional, TemplateRef } from '@angular/core';
import { SsModalRef } from '../components/modal/modal-ref';
import { Subject, defer } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { SsModalOptions } from '../components/modal/modal-types';
import { setContentInstanceParams, applyConfigDefaults } from '../components/modal/utils';
import { PortalInjector, ComponentPortal } from '@angular/cdk/portal';
import { ModalContainerComponent } from '../components/modal/modal-container/modal-container.component';
import { OverlayRef } from '@angular/cdk/overlay';
import { findComponentInfo } from '../decorator/component-register.decorator';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./common.service";
export class ModalManagerService {
    constructor(overlay, injector, parentModal, componentFactoryResolver, appRef, commonService) {
        this.overlay = overlay;
        this.injector = injector;
        this.parentModal = parentModal;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.commonService = commonService;
        this.openModalsAtThisLevel = [];
        this.afterAllClosedAtThisLevel = new Subject();
        this.factories = new Map();
        this.factoriesArray = null;
        this.afterAllClose = defer(() => this.openModals.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));
        this.modalContainerClass = "ssmodal_container";
        this.factories = this.componentFactoryResolver["_factories"];
        if (this.factories) {
            this.factoriesArray = Array.from(this.factories);
        }
    }
    get openModals() {
        return this.parentModal ? this.parentModal.openModals : this.openModalsAtThisLevel;
    }
    get _afterAllClosed() {
        const parent = this.parentModal;
        return parent ? parent._afterAllClosed : this.afterAllClosedAtThisLevel;
    }
    createModalContainer() {
        let container = document.querySelector(this.modalContainerClass);
        if (container == null) {
            container = window.document.createElement("div");
            container.className = this.modalContainerClass;
            window.document.body.appendChild(container);
        }
        this.modalContainer = container;
    }
    create(config) {
        return this.open(config.content, config);
    }
    closeAll() {
        this.closeModals(this.openModals);
    }
    attachModalContainer2(overlayRef, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = new PortalInjector(userInjector || this.injector, new WeakMap([
            [OverlayRef, overlayRef],
            [SsModalOptions, config]
        ]));
        const ContainerComponent = ModalContainerComponent;
        const containerPortal = new ComponentPortal(ContainerComponent, config.viewContainerRef, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    open(componentOrTemplateRef, config) {
        const configMerged = applyConfigDefaults(config || {}, new SsModalOptions());
        const modalContainerRef = this.attachModalContainer(configMerged);
        const modalRef = this.attachModalContent(componentOrTemplateRef, configMerged, modalContainerRef);
        modalContainerRef.instance.modalRef = modalRef;
        this.openModals.push(modalRef);
        modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));
        return modalRef;
    }
    removeOpenModal(modalRef) {
        const index = this.openModals.indexOf(modalRef);
        if (index > -1) {
            this.openModals.splice(index, 1);
            if (!this.openModals.length) {
                this._afterAllClosed.next();
            }
        }
    }
    closeModals(dialogs) {
        let i = dialogs.length;
        while (i--) {
            dialogs[i].close();
            if (!this.openModals.length) {
                this._afterAllClosed.next();
            }
        }
    }
    attachModalContainer(config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = new PortalInjector(userInjector || this.injector, new WeakMap([
            [SsModalOptions, config]
        ]));
        this.createModalContainer();
        let inputs = {
            config: config
        };
        let inputProviders = Object.keys(inputs).map((inputName) => {
            return { provide: inputName, useValue: inputs[inputName] };
        });
        const ContainerComponent = ModalContainerComponent;
        const factory = this.componentFactoryResolver.resolveComponentFactory(ContainerComponent);
        const injectorc = Injector.create({ providers: inputProviders, parent: injector });
        const containerRef = factory.create(injectorc);
        this.modalContainer.appendChild(this.commonService.getComponentRootNode(containerRef));
        this.appRef.attachView(containerRef.hostView);
        return containerRef;
    }
    findComponent(name) {
        let comp = null;
        if (this.factories) {
            if (!this.factories || this.factories.size <= 0)
                return null;
            let item = this.factoriesArray.find((value, index, arr) => {
                return value[1].selector.toLowerCase() === name.toLowerCase() || value[0].name.toLowerCase() === name.toLocaleLowerCase();
            });
            if (item) {
                comp = item[0];
            }
        }
        else {
            const compInfo = findComponentInfo(name);
            if (compInfo) {
                return compInfo.component;
            }
        }
        return comp;
    }
    attachModalContent(componentOrTemplateRef, config, modalContainerRef) {
        const modalRef = new SsModalRef(config, modalContainerRef);
        if (componentOrTemplateRef instanceof TemplateRef) {
        }
        else if (componentOrTemplateRef && typeof componentOrTemplateRef !== 'string') {
            let inputs = {};
            if (config.componentParams) {
                inputs = config.componentParams;
            }
            let inputProviders = Object.keys(inputs).map((inputName) => {
                return { provide: inputName, useValue: inputs[inputName] };
            });
            let component = componentOrTemplateRef;
            if (this.factories && !this.factories.get(componentOrTemplateRef)) {
                component = this.findComponent(componentOrTemplateRef.name);
            }
            const factory = this.componentFactoryResolver.resolveComponentFactory(component);
            const injector = Injector.create({ providers: inputProviders, parent: this.createInjector(modalRef, config) });
            const compRef = factory.create(injector);
            setContentInstanceParams(compRef.instance, config.componentParams);
            modalContainerRef.instance.attachComponentPortal(compRef);
            modalRef.componentInstance = compRef.instance;
            modalRef.componentRef = compRef;
        }
        return modalRef;
    }
    createInjector(modalRef, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injectionTokens = new WeakMap([[SsModalRef, modalRef]]);
        return new PortalInjector(userInjector || this.injector, injectionTokens);
    }
    ngOnDestroy() {
        this.closeModals(this.openModalsAtThisLevel);
        this.afterAllClosedAtThisLevel.complete();
    }
}
ModalManagerService.ɵfac = function ModalManagerService_Factory(t) { return new (t || ModalManagerService)(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(ModalManagerService, 12), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i2.CommonService)); };
ModalManagerService.ɵprov = i0.ɵɵdefineInjectable({ token: ModalManagerService, factory: ModalManagerService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ModalManagerService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.Overlay }, { type: i0.Injector }, { type: ModalManagerService, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i2.CommonService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,