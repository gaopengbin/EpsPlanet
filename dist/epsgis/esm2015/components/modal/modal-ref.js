import { Subject } from 'rxjs';
import { EventEmitter } from '@angular/core';
export function isPromise(obj) {
    return !!obj && typeof obj.then === 'function' && typeof obj.catch === 'function';
}
export class SsModalRef {
    constructor(config, containerRef) {
        this.config = config;
        this.containerRef = containerRef;
        this.componentInstance = null;
        this.state = 0;
        this.afterClose = new Subject();
        this.afterOpen = new Subject();
        this.containerInstance = containerRef.instance;
        this.containerInstance.cancelTriggered.subscribe(() => this.trigger("cancel"));
        this.containerInstance.okTriggered.subscribe(() => this.trigger("ok"));
        this.containerInstance.onCloseTreggered.subscribe(() => {
            this.afterClose.next(this.result);
            this.afterClose.complete();
            if (config.afterClose instanceof EventEmitter) {
                config.afterClose.emit(this.result);
            }
            this.containerRef = null;
            this.containerInstance = null;
            this.componentRef = null;
            this.componentInstance = null;
        });
    }
    getContentComponent() {
        return this.componentInstance;
    }
    getElement() {
        return this.containerInstance.getNativeElement();
    }
    destroy(result) {
        this.close(result);
    }
    triggerOk() {
        this.trigger("ok");
    }
    triggerCancel() {
        this.trigger("cancel");
    }
    open() {
    }
    close(result) {
        this.result = result;
        this.componentRef.destroy();
        this.containerRef.destroy();
        this.state = 2;
        this.afterClose.next(this.result);
    }
    updateConfig(config) {
        Object.assign(this.config, config);
        this.containerInstance.cdr.markForCheck();
    }
    getState() {
        return this.state;
    }
    getConfig() {
        return this.config;
    }
    getBackdropElement() {
        return null;
    }
    trigger(action) {
        const trigger = { ok: this.config.onOk, cancel: this.config.onCancel }[action];
        const loadingKey = { ok: 'okLoading', cancel: 'cancelLoading' }[action];
        const loading = this.config[loadingKey];
        if (loading) {
            return;
        }
        if (trigger instanceof EventEmitter) {
            trigger.emit(this.getContentComponent());
        }
        else if (typeof trigger === 'function') {
            const result = trigger(this.getContentComponent());
            const caseClose = (doClose) => doClose !== false && this.close(doClose);
            if (isPromise(result)) {
                this.config[loadingKey] = true;
                const handleThen = (doClose) => {
                    this.config[loadingKey] = false;
                    this.closeWhitResult(doClose);
                };
                result.then(handleThen).catch(handleThen);
            }
            else {
                caseClose(result);
            }
        }
    }
    closeWhitResult(result) {
        if (result !== false) {
            this.close(result);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,