import { Optional, ViewChild, Directive } from '@angular/core';
import { BasePanelComponent } from '../base-panel/base-panel.component';
import { PanelDockMode } from '../../models/base-panel';
import * as i0 from "@angular/core";
const _c0 = ["center_collapse"];
export class BaseDockablePanelComponent extends BasePanelComponent {
    constructor(_render, cdr) {
        super(_render, cdr);
        this._render = _render;
        this.cdr = cdr;
        this.zIndex = 100;
        this._isCollapse = false;
        this.moveTopOnActive = false;
    }
    get mapBounds() {
        var rect = this.commonService.getElementBounds(this.commonService.getComponentRootNode(this.mapManager.comRefMap));
        rect.top = rect.top - this._getMapTop();
        rect.left = rect.left - this._getMapLeft();
        return rect;
    }
    _getMapTop() {
        var ele = this.commonService.getComponentRootNode(this.mapManager.comRefMap);
        const rect = ele.getBoundingClientRect();
        let mapSettingTop = "0";
        if (this.widgetManager.appConfig.map.position && this.widgetManager.appConfig.map.position.top)
            mapSettingTop = this.widgetManager.appConfig.map.position.top;
        let chv = parseFloat(this.commonService.getPxNumber(mapSettingTop).toString());
        const mapTop = rect.top - chv;
        return mapTop;
    }
    _getMapLeft() {
        var ele = this.commonService.getComponentRootNode(this.mapManager.comRefMap);
        const rect = ele.getBoundingClientRect();
        var mapSettingLeft = 0;
        if (this.widgetManager.appConfig.map.position && this.widgetManager.appConfig.map.position.left)
            mapSettingLeft = this.widgetManager.appConfig.map.position.left;
        var chv = parseFloat(this.commonService.getPxNumber(mapSettingLeft).toString());
        const mapLeft = rect.left - chv;
        return mapLeft;
    }
    ngOnInit() {
        super.ngOnInit();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
    _setPCPosition() {
        this.widgetConfig.position.zIndex = this.zIndex;
        super._setPCPosition();
    }
    onMove() {
        super.onMove();
    }
    onClose() {
        super.onClose();
    }
    _resizeMapWhenResize() {
        switch (this.dockMode) {
            case PanelDockMode.left:
                this.mapManager.changeMapPosition({ left: this.commonService.getPx(this.currentSize.width) });
                break;
            case PanelDockMode.bottom:
                this.mapManager.changeMapPosition({ bottom: this.commonService.getPx(this.currentSize.height) });
                break;
            case PanelDockMode.right:
                this.mapManager.changeMapPosition({ right: this.commonService.getPx(this.currentSize.width) });
                break;
            default:
                break;
        }
    }
    _resizeMapWhenClose() {
        switch (this.dockMode) {
            case PanelDockMode.left:
                this.mapManager.changeMapPosition({ left: this.commonService.getPx(this.mapManager.originMapPosition.left) });
                break;
            case PanelDockMode.bottom:
                this.mapManager.changeMapPosition({ bottom: this.commonService.getPx(this.mapManager.originMapPosition.bottom) });
                break;
            case PanelDockMode.right:
                this.mapManager.changeMapPosition({ right: this.commonService.getPx(this.mapManager.originMapPosition.right) });
                break;
            default:
                break;
        }
    }
    showPanel() {
        this.__expand(false);
        super.showPanel();
    }
    hidePanel() {
        this.__collapse(false);
        super.hidePanel();
    }
    __collapse(runOnClose) {
        const _eleSvg = this.sspanel_center_collapse.nativeElement.querySelector("svg");
        if (this.dockMode === PanelDockMode.left) {
            const _left = -this.commonService.getElementBounds(this.sspanel.nativeElement).width;
            this._render.setStyle(this.sspanel.nativeElement, "left", _left + "px");
        }
        else if (this.dockMode === PanelDockMode.bottom) {
            const _bottom = -this.commonService.getElementBounds(this.sspanel.nativeElement).height;
            this._render.setStyle(this.sspanel.nativeElement, "bottom", _bottom + "px");
        }
        else if (this.dockMode === PanelDockMode.right) {
            const _right = -this.commonService.getElementBounds(this.sspanel.nativeElement).width;
            this._render.setStyle(this.sspanel.nativeElement, "right", _right + "px");
        }
        this._render.addClass(_eleSvg, "expand");
        this._resizeMapWhenClose();
        this._isCollapse = true;
    }
    __expand(runOnOpen) {
        const _eleSvg = this.sspanel_center_collapse.nativeElement.querySelector("svg");
        if (this.dockMode === PanelDockMode.left) {
            this._render.setStyle(this.sspanel.nativeElement, "left", "0px");
        }
        else if (this.dockMode === PanelDockMode.bottom) {
            this._render.setStyle(this.sspanel.nativeElement, "bottom", "0px");
        }
        else if (this.dockMode === PanelDockMode.right) {
            this._render.setStyle(this.sspanel.nativeElement, "right", "0px");
        }
        this._render.removeClass(_eleSvg, "expand");
        this._resizeMapWhenResize();
        this._isCollapse = false;
    }
    collapsePanel(evt) {
        if (this._isCollapse) {
            this.__expand(false);
        }
        else {
            this.__collapse(false);
        }
    }
}
BaseDockablePanelComponent.ɵfac = function BaseDockablePanelComponent_Factory(t) { return new (t || BaseDockablePanelComponent)(i0.ɵɵdirectiveInject(i0.Renderer2, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 8)); };
BaseDockablePanelComponent.ɵdir = i0.ɵɵdefineDirective({ type: BaseDockablePanelComponent, viewQuery: function BaseDockablePanelComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 3);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sspanel_center_collapse = _t.first);
    } }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseDockablePanelComponent, [{
        type: Directive
    }], function () { return [{ type: i0.Renderer2, decorators: [{
                type: Optional
            }] }, { type: i0.ChangeDetectorRef, decorators: [{
                type: Optional
            }] }]; }, { sspanel_center_collapse: [{
            type: ViewChild,
            args: ["center_collapse", { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,