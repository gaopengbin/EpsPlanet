import { Directive } from "@angular/core";
import * as _ from 'lodash';
import { WidgetPosition, WidgetState, WidgetType, WidgetWindowState } from "../models/base-widget";
import * as i0 from "@angular/core";
export class BaseWidget {
    constructor() {
        this.type = WidgetType.widget;
        this.id = "";
        this.label = undefined;
        this.icon = undefined;
        this.uri = undefined;
        this.originPosition = new WidgetPosition();
        this.position = new WidgetPosition();
        this.config = undefined;
        this.openAtStart = false;
        this.map = null;
        this.view = null;
        this.appConfig = null;
        this.folderUrl = null;
        this.state = WidgetState.closed;
        this.windowState = WidgetWindowState.normal;
        this.started = false;
        this.name = '';
        this.moveTopOnActive = true;
        this.widgetConfig = null;
        this.configId = null;
        this.style = "";
        this.title = "";
        this.tooltip = "";
        this.reqPara = undefined;
        this.gid = "";
        this.inPanel = true;
        this.isOnScreen = true;
        this.minZindex = 102;
        this._compInfo = { uri: "", name: "BaseWidgetComponent", path: "" };
    }
    afterNgOnInit() {
    }
    afterNgAfterViewInit() {
    }
    ngOnInit() {
        this.afterNgOnInit();
    }
    ngAfterViewInit() {
        this.afterNgAfterViewInit();
    }
    ngOnDestroy() {
    }
    getCompInfo() {
        return this._compInfo;
    }
    setServiceInjector(serviceInjector) {
        if (!serviceInjector)
            return;
        this.globalParams = serviceInjector.config;
        this.utils = serviceInjector.utils;
        this.commonService = serviceInjector.commonService;
        this.httpService = serviceInjector.httpService;
        this.configLoader = serviceInjector.configLoader;
        this.configManager = serviceInjector.configManager;
        this.mapManager = serviceInjector.mapManager;
        this.panelManager = serviceInjector.panelManager;
        this.widgetManager = serviceInjector.widgetManager;
        this.widgetPlaceHolder = serviceInjector.widgetPlaceHolder;
        this.layoutManager = serviceInjector.layoutManager;
        this.eventService = this.layoutManager.eventService;
        this.jsEventManager = serviceInjector.jsEventManager;
        this.componentLoader = serviceInjector.componentManager;
        this.modalManager = serviceInjector.modalManaer;
        this.settingService = serviceInjector.settingService;
    }
    setPosition(positionConfig) {
        this.position = this.commonService.getPosition(positionConfig);
        this.originPosition = _.cloneDeep(this.position);
    }
    changePosition(positionConfig) {
        this.position = this.commonService.getPosition(positionConfig);
    }
    setState(state) {
        this.state = state;
    }
    startup() {
        this.started = true;
    }
    onOpen() {
        this.state = WidgetState.opened;
    }
    resize(position) {
    }
    onDeActive() {
    }
    onClose() {
        this.state = WidgetState.closed;
    }
    onAction(name, data) {
    }
    setZIndex(index) {
        switch (index) {
            case "active":
                this.position.zIndex = this.minZindex;
                break;
            case "deactive":
                this.position.zIndex = "auto";
                break;
            default:
                this.position.zIndex = index;
                break;
        }
    }
    onNormalize() {
    }
    onMinimize() { }
    onMaximize() {
    }
    changeMap(map) {
        this.map = map;
        this.eventService.rss.emit(this.eventService._mapChanged, map);
    }
    onMapChange(map) {
    }
    changeView(view) {
        this.view = view;
        this.eventService.rss.emit(this.eventService._viewChanged, view);
    }
    onViewChange(view) {
    }
    get isSettingMode() {
        var _a;
        return ((_a = this.globalParams) === null || _a === void 0 ? void 0 : _a.urlParams["mode"]) === "config";
    }
}
BaseWidget.ɵfac = function BaseWidget_Factory(t) { return new (t || BaseWidget)(); };
BaseWidget.ɵdir = i0.ɵɵdefineDirective({ type: BaseWidget });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseWidget, [{
        type: Directive
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,