export class PropWatcher {
    static watch(obj, prop, after, before) {
        let oldval = obj[prop], newval = oldval, getter = () => {
            return newval;
        }, setter = (val) => {
            oldval = newval;
            if (before && typeof before === "function") {
                newval = before.call(obj, prop, oldval, val);
            }
            else {
                newval = val;
            }
            if (oldval != newval) {
                Promise.resolve().then(() => { after.call(obj, prop, oldval, newval); });
            }
            return newval;
        };
        if (delete obj[prop]) {
            if (Object.defineProperty) {
                Object.defineProperty(obj, prop, {
                    configurable: true,
                    get: getter,
                    set: setter
                });
            }
            else if (Object.prototype["__defineGetter__"] && Object.prototype["__defineGetter__"]) {
                Object.prototype["__defineGetter__"].call(obj, prop, getter);
                Object.prototype["__defineGetter__"].call(obj, prop, setter);
            }
        }
        return () => { PropWatcher.unwatch(obj, prop); };
    }
    static unwatch(obj, prop) {
        let val = obj[prop];
        delete obj[prop];
        obj[prop] = val;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC13YXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZXBzZ2lzL3V0aWxzL3Byb3Atd2F0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8sV0FBVztJQVFwQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBdUMsRUFBRSxNQUF3QztRQUNyRyxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxHQUFHLE1BQU0sRUFDbkMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNWLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsRUFDRCxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNiLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDaEIsSUFBSSxNQUFNLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO2dCQUN4QyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNoRDtpQkFBTTtnQkFDSCxNQUFNLEdBQUcsR0FBRyxDQUFDO2FBQ2hCO1lBQ0QsSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO2dCQUNsQixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1RTtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztRQUNOLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEIsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO2dCQUN2QixNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7b0JBQzdCLFlBQVksRUFBRSxJQUFJO29CQUNsQixHQUFHLEVBQUUsTUFBTTtvQkFDWCxHQUFHLEVBQUUsTUFBTTtpQkFDZCxDQUFDLENBQUM7YUFDTjtpQkFDSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7Z0JBQ25GLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDN0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ2hFO1NBQ0o7UUFDRCxPQUFPLEdBQUcsRUFBRSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFNRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ3BCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUtwQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3BCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5a+56LGh5bGe5oCn55uR5o6nIGJ5IHJ1aXJcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BXYXRjaGVyIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIOWvueixoVxuICAgICAqIEBwYXJhbSBwcm9wIOWxnuaAp1xuICAgICAqIEBwYXJhbSBhZnRlciDotYvlgLzlkI7lpITnkIblh73mlbBcbiAgICAgKiBAcGFyYW0gYmVmb3JlIOi1i+WAvOWJjeWkhOeQhuWHveaVsFxuICAgICAqL1xuICAgIHN0YXRpYyB3YXRjaChvYmosIHByb3AsIGFmdGVyOiAoKHByb3AsIG9sZHZhbCwgbmV3dmFsKSA9PiB2b2lkKSwgYmVmb3JlPzogKChwcm9wLCBvbGR2YWwsIG5ld3ZhbCkgPT4gYW55KSkge1xuICAgICAgICBsZXQgb2xkdmFsID0gb2JqW3Byb3BdLCBuZXd2YWwgPSBvbGR2YWwsXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld3ZhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXR0ZXIgPSAodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgb2xkdmFsID0gbmV3dmFsO1xuICAgICAgICAgICAgICAgIGlmIChiZWZvcmUgJiYgdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld3ZhbCA9IGJlZm9yZS5jYWxsKG9iaiwgcHJvcCwgb2xkdmFsLCB2YWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld3ZhbCA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9sZHZhbCAhPSBuZXd2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7IGFmdGVyLmNhbGwob2JqLCBwcm9wLCBvbGR2YWwsIG5ld3ZhbCk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3dmFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgaWYgKGRlbGV0ZSBvYmpbcHJvcF0pIHsgLy8g5LiN6IO955uR5o6n5bi46YePXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7Ly8gRUNNQVNjcmlwdCA1XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZVtcIl9fZGVmaW5lR2V0dGVyX19cIl0gJiYgT2JqZWN0LnByb3RvdHlwZVtcIl9fZGVmaW5lR2V0dGVyX19cIl0pIHtcbiAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlW1wiX19kZWZpbmVHZXR0ZXJfX1wiXS5jYWxsKG9iaiwgcHJvcCwgZ2V0dGVyKTtcbiAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlW1wiX19kZWZpbmVHZXR0ZXJfX1wiXS5jYWxsKG9iaiwgcHJvcCwgc2V0dGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4geyBQcm9wV2F0Y2hlci51bndhdGNoKG9iaiwgcHJvcCk7IH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmog5a+56LGhXG4gICAgICogQHBhcmFtIHByb3Ag5bGe5oCnXG4gICAgICovXG4gICAgc3RhdGljIHVud2F0Y2gob2JqLCBwcm9wKSB7XG4gICAgICAgIGxldCB2YWwgPSBvYmpbcHJvcF07XG4gICAgICAgIC8vIGNvbnN0IHhvYmogPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgICAgIC8vIGlmICh4b2JqICYmIHhvYmouc2V0KSB7XG4gICAgICAgIC8vICAgICB4b2JqLnNldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gfVxuICAgICAgICBkZWxldGUgb2JqW3Byb3BdO1xuICAgICAgICBvYmpbcHJvcF0gPSB2YWw7XG4gICAgfVxufVxuIl19