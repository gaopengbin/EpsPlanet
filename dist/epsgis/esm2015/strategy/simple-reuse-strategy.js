import { AppGlobalConfig } from '../models/app-config';
export class SimpleReuseStrategy {
    constructor(injector) {
        this.injector = injector;
    }
    shouldDetach(route) {
        if (!route.routeConfig || route.routeConfig.loadChildren) {
            return false;
        }
        if (route.data.reuse === false) {
            return false;
        }
        const url = route['_routerState'].url;
        if (!this.appGlobal) {
            this.appGlobal = this.injector.get(AppGlobalConfig);
        }
        if (this.appGlobal.menuConfig
            && this.appGlobal.menuConfig.notReuseRoutes
            && this.appGlobal.menuConfig.notReuseRoutes.length >= 1) {
            return !this.appGlobal.menuConfig.notReuseRoutes.some(n => url.toLocaleLowerCase().indexOf(n.toLocaleLowerCase()) >= 0);
        }
        return true;
    }
    store(route, handle) {
        if (!route.routeConfig || route.routeConfig.loadChildren)
            return;
        const key = SimpleReuseStrategy.getRouteUrl(route);
        if (SimpleReuseStrategy.waitDelete && SimpleReuseStrategy.waitDelete === key) {
            SimpleReuseStrategy.waitDelete = null;
            return;
        }
        SimpleReuseStrategy.snapshots[key] = handle;
    }
    shouldAttach(route) {
        if (!route.routeConfig || route.routeConfig.loadChildren)
            return false;
        return !!SimpleReuseStrategy.snapshots[SimpleReuseStrategy.getRouteUrl(route)];
    }
    retrieve(route) {
        if (!route.routeConfig) {
            return null;
        }
        if (route.routeConfig.loadChildren) {
            Object.keys(SimpleReuseStrategy.snapshots).forEach(key => delete SimpleReuseStrategy.snapshots[key]);
            return null;
        }
        return SimpleReuseStrategy.snapshots[SimpleReuseStrategy.getRouteUrl(route)];
    }
    shouldReuseRoute(future, curr) {
        return future.routeConfig === curr.routeConfig && JSON.stringify(future.params) === JSON.stringify(curr.params);
    }
    static getRouteUrl(route) {
        const key = route['_routerState'].url.replace(/\//g, '_') + '_' + (route.routeConfig.loadChildren || route.routeConfig.component.toString().split('(')[0].split(' ')[1]);
        return key;
    }
    static deleteRouteSnapshot(key) {
        if (SimpleReuseStrategy.snapshots[key]) {
            this.deactivateOutlet(this.snapshots[key]);
            delete SimpleReuseStrategy.snapshots[key];
        }
        else {
            SimpleReuseStrategy.waitDelete = key;
        }
    }
    static deactivateOutlet(handle) {
        const componentRef = handle ? handle['componentRef'] : null;
        if (componentRef) {
            componentRef.destroy();
        }
    }
    static clearRouteSnapshot() {
        for (const key in this.snapshots) {
            if (this.snapshots[key]) {
                this.deactivateOutlet(this.snapshots[key]);
            }
        }
        this.snapshots = {};
        SimpleReuseStrategy.waitDelete = "";
    }
}
SimpleReuseStrategy.snapshots = {};
//# sourceMappingURL=data:application/json;base64,